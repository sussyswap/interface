{"version":3,"sources":["nft/css/loading.css.ts","nft/components/card/media.tsx","nft/components/card/icons.tsx","nft/components/card/utils.tsx","featureFlags/flags/payWithAnyToken.ts","nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/useTokenInput.ts","nft/hooks/useFetchAssets.ts","nft/hooks/usePurchaseAssets.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/BagFooter.tsx","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePermit2Approval.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/hooks/useBagTotalEthPrice.ts"],"names":["loadingBlock","loadingAsset","StyledImageContainer","styled","div","isDisabled","theme","opacity","disabled","enabled","MediaContainer","children","StyledMediaContainer","Row","StyledImage","img","$aspectRatio","transition","duration","medium","timing","ease","$hidden","imageLoading","backgroundOutline","backgroundSurface","NftImage","src","uniformAspectRatio","UniformAspectRatios","square","setUniformAspectRatio","renderedHeight","setRenderedHeight","useState","noContent","setNoContent","loaded","setLoaded","NoContentContainer","height","getHeightFromAspectRatio","getMediaAspectRatio","draggable","onError","onLoad","e","handleUniformAspectRatio","PlaybackButton","pauseButton","BREAKPOINTS","sm","StyledVideo","video","StyledInnerMediaContainer","StyledAudio","audio","NftPlayableMedia","isAudio","mediaSrc","tokenId","shouldPlay","setCurrentTokenPlayingMedia","mediaRef","useRef","imageLoaded","setImageLoaded","useEffect","current","play","pause","size","onClick","preventDefault","stopPropagation","undefined","ref","onEnded","loop","playsInline","NoContentContainerBackground","$height","backgroundInteractive","NoContentText","ThemedText","BodyPrimary","colors","gray500","StyledMarketplaceContainer","isText","ListPriceRowContainer","MarketplaceContainer","isSelected","marketplace","tokenType","listedPrice","width","viewBox","NftStandard","Erc1155","getMarketplaceIcon","SuspiciousIcon","AlertTriangle","RarityLogoContainer","RarityText","BodySmall","RarityInfo","Caption","Ranking","provider","rank","text","placement","putCommas","SuspiciousIconContainer","Suspicious","AssetMediaType","getAssetImageUrl","asset","imageUrl","smallImageUrl","getAssetMediaUrl","animationUrl","detailsHref","address","asset_contract","getNftDisplayComponent","mediaShouldBePlaying","assetMediaType","Image","Audio","isVideo","Video","getAssetMediaType","useSelectAsset","selectAsset","unselectAsset","useCallback","market","Markets","Opensea","LooksRare","X2Y2","Sudoswap","NFT20","NFTX","Cryptopunks","currentTarget","clientHeight","aspectRatio","clientWidth","unset","usePayWithAnyTokenEnabled","useBaseFlag","FeatureFlag","payWithAnyToken","BaseVariant","Enabled","getPurchasableAssets","itemsInBag","filter","item","status","BagItemStatus","UNAVAILABLE","map","getNextBagState","wishAssetsToBuy","route","purchasingWithErc20","compareAssetsWithTransactionRoute","hasPriceAdjustment","updatedAssets","shouldRefetchCalldata","filterUpdatedAssetsByState","unchanged","priceChanged","unavailable","hasAssets","length","hasAssetsInReview","hasUnavailableAssets","shouldReview","newBagItems","unavailableAsset","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","createBagFromUpdatedAssets","nextBagStatus","BagStatus","IN_REVIEW","CONFIRM_REVIEW","CONFIRM_QUOTE","CONFIRMING_IN_WALLET","ADDING_TO_BAG","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","Buy","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","contractAddress","priceInfo","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","sendAmount","data","calldata","to","toAddress","useTokenInput","create","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","name","useFetchAssets","account","useWeb3React","useBag","setBagStatus","didOpenUnavailableAssets","setDidOpenUnavailableAssets","isLocked","setLocked","setItemsInBag","shallow","uncheckedItemsInBag","bagIsLocked","setBagLocked","state","useMemo","recalculateBagUsingPooledAssets","useNftRouteLazyQuery","fetchGqlRoute","purchaseAssets","sendTransaction","useSendTransaction","setTransactionResponse","useTransactionResponse","setBagExpanded","reset","resetBag","routingData","assetsToBuy","getSigner","purchaseResponse","bagExpanded","usePurchaseAssets","resetStateBeforeFetch","FETCHING_ROUTE","a","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","buildTradeRouteInput","swap","inputAmount","swapAmounts","outputAmount","quotient","token","isToken","chainId","isNative","pools","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","hasRoutes","routes","hasInputAmount","hasAllowance","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","usePriceImpact","useTheme","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","accentCritical","accentWarning","priceImpactSeverity","type","color","displayPercentage","priceImpact","sign","lessThan","Number","numerator","denominator","number","parseFloat","toFixed","toHumanReadablePercent","FooterContainer","Footer","FooterHeader","Column","usingPayWithAnyToken","CurrencyRow","TotalColumn","WarningIcon","WarningText","$color","HelperText","CurrencyInput","PayButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","ActionButton","backgroundColor","textColor","Warning","fontSize","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","TradeState","LOADING","fontWeight","SYNCING","ethNumberStandardFormatter","toExact","formatWeiToDecimal","symbol","FiatValue","usdcValue","style","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleWalletDrawer","connector","connected","Boolean","useBagTotalEthPrice","shouldUsePayWithAnyToken","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","bagStatus","tokenSelectorOpen","setTokenSelectorOpen","isPending","includes","SupportedChainId","AVALANCHE","transactionState","setTransactionState","setState","transactionStateRef","subscribe","TxStateType","Confirming","Denied","Invalid","WARNING","New","useSubscribeTransactionState","fetchAssets","parsedOutputAmount","tryParseCurrencyAmount","formatEther","useBestTrade","TradeType","EXACT_OUTPUT","useAutoSlippageTolerance","maximumAmountIn","useDerivedPayWithAnyTokenSwapInfo","maximumAmount","usePermit2Allowance","UNIVERSAL_ROUTER_ADDRESS","isApprovalLoading","AllowanceState","REQUIRED","isAllowancePending","setIsAllowancePending","updateAllowance","invariant","approveAndPermit","sendAnalyticsEvent","InterfaceEventName","APPROVE_TOKEN_TXN_SUBMITTED","chain_id","token_symbol","token_address","console","error","usePermit2Approval","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balanceInEth","useWalletBalance","balance","sufficientBalance","parseEther","gte","handleClick","buttonText","warningText","warningTextColor","helperText","helperTextColor","textSecondary","buttonColor","accentAction","buttonTextColor","accentTextLightPrimary","switchChain","VALID","textPrimary","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","marginBottom","justify","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","selectedCurrency","onlyShowCurrenciesWithBalance","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","bagRow","bagRowImage","grayscaleImage","assetName","collectionName","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","background","className","styles","textAlign","left","top","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","noImageAvailable","setNoImageAvailable","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","handleRemoveClick","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","alt","clsx","visibility","overflow","whiteSpace","susFlag","collectionIsVerified","emphasis","ButtonEmphasis","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","from","gt","handleRemove","handleKeep","borderTopColor","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","useReducer","s","toggleOpen","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","cursor","bodySmall","slice","BagContent","removeAssetsFromBag","useIsMobile","fetchedPriceData","useQuery","fetchPrice","unchangedAssets","ADDED_TO_BAG","priceChangedAssets","unavailableAssets","availableItems","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","StyledColumn","EmptyState","useIsNftProfilePage","themeVars","textTertiary","subhead","ProfileAssetRow","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","ProfileBagContent","sellAssets","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","xxxl","DetailsPageBackground","ContinueButton","ScrollingIndicator","show","marginX","borderBottomColor","Bag","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","setUserCanScroll","scrollProgress","setScrollProgress","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","node","canScroll","scrollHeight","onScroll","event","scrollTop","containerHeight","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay","reduce","total","add","useBagTotalUsdPrice"],"mappings":"wJAAA,uFAEWA,EAAe,WACfC,EAAe,mD,+QCOpBC,EAAuBC,UAAOC,IAAG,uCAAVD,CAAU,4EAIxB,gBAAGE,EAAU,EAAVA,WAAYC,EAAK,EAALA,MAAK,OAAQD,EAErCC,EAAMC,QAAQC,SAAWF,EAAMC,QAAQE,WAEjC,YAAa,SAAVJ,WAA+B,UAAY,aAG7CK,EAAiB,SAAH,GAAgF,IAA1EL,EAAU,EAAVA,WAAYM,EAAQ,EAARA,SAC3C,OAAO,cAACT,EAAoB,CAACG,WAAYA,EAAW,SAAEM,KAWlDC,EAAuBT,kBAAOU,KAAI,uCAAXV,CAAW,+EAM3BW,EAAcX,UAAOY,IAAG,uCAAVZ,CAAU,wHAMnB,YAAe,SAAZa,gBACL,gBAAGV,EAAK,EAALA,MAAK,gBAElBA,EAAMW,WAAWC,SAASC,OAAM,YAAIb,EAAMW,WAAWG,OAAOC,KAAI,iBAGtD,YAAU,SAAPC,QAAyB,SAAW,aACvC,gBAAGhB,EAAK,EAALA,MAAmB,SAAZiB,cACV,kCAEVjB,EAAMkB,kBAAiB,gBAAQlB,EAAMmB,kBAAiB,aAG/CC,EAAW,SAAH,GAMF,IALjBC,EAAG,EAAHA,IAAI,EAAD,EACHC,0BAAkB,MAAGC,IAAoBC,OAAM,EAC/CC,EAAqB,EAArBA,sBACAC,EAAc,EAAdA,eACAC,EAAiB,EAAjBA,kBAEA,EAAkCC,oBAAUP,GAAI,mBAAzCQ,EAAS,KAAEC,EAAY,KAC9B,EAA4BF,oBAAS,GAAM,mBAApCG,EAAM,KAAEC,EAAS,KAExB,OAAIH,EACK,cAACI,EAAkB,CAACC,OAAQC,YAAyBb,EAAoBI,KAIhF,cAACpB,EAAoB,UACnB,cAACE,EAAW,CACVa,IAAKA,EACLX,aAAc0B,YAAoBd,EAAoBG,GACtDR,cAAec,EACfM,WAAW,EACXC,QAAS,kBAAMR,GAAa,IAC5BS,OAAQ,SAACC,GACPC,YAAyBnB,EAAoBkB,EAAGf,EAAuBC,EAAgBC,GACvFK,GAAU,SAedU,EAAiB7C,UAAOC,IAAG,uCAAVD,CAAU,uNACpB,YAAc,SAAX8C,YAAiC,QAAU,UAChD,YAAQ,SAAL3C,MAEU,eAQU4C,IAAYC,GAI1CjD,GAKEkD,EAAcjD,UAAOkD,MAAK,uCAAZlD,CAAY,kCAId,YAAe,SAAZa,gBAGfsC,EAA4BnD,kBAAOU,KAAI,uCAAXV,CAAW,yCAMvCoD,EAAcpD,UAAOqD,MAAK,uCAAZrD,CAAY,6BAKnBsD,EAAmB,SAAH,GAWG,IAV9BC,EAAO,EAAPA,QACA/B,EAAG,EAAHA,IACAgC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QAAQ,EAAD,EACPhC,0BAAkB,MAAGC,IAAoBC,OAAM,EAC/CC,EAAqB,EAArBA,sBACAC,EAAc,EAAdA,eACAC,EAAiB,EAAjBA,kBACA4B,EAAU,EAAVA,WACAC,EAA2B,EAA3BA,4BAEMC,EAAWC,iBAAyB,MAC1C,EAAkC9B,oBAAUP,GAAI,mBAAzCQ,EAAS,KAAEC,EAAY,KAC9B,EAAsCF,oBAAS,GAAM,mBAA9C+B,EAAW,KAAEC,EAAc,KAUlC,OARAC,qBAAU,WACJN,GAAcE,EAASK,QACzBL,EAASK,QAAQC,QACPR,GAAcE,EAASK,SACjCL,EAASK,QAAQE,UAElB,CAACT,IAEA1B,EACK,cAACI,EAAkB,CAACC,OAAQC,YAAyBb,EAAoBI,KAIhF,qCACE,cAACpB,EAAoB,UACnB,cAACE,EAAW,CACVa,IAAKA,EACLX,aAAc0B,YAAoBd,EAAoBG,GACtDR,cAAe0C,EACftB,WAAW,EACXC,QAAS,kBAAMR,GAAa,IAC5BS,OAAQ,SAACC,GACPC,YAAyBnB,EAAoBkB,EAAGf,EAAuBC,EAAgBC,GACvFiC,GAAe,IAEjB5C,QAASuC,IAAeH,MAG3BG,EACC,qCACE,cAACb,EAAc,CAACC,aAAa,EAAK,SAChC,cAAC,IAAK,CACJsB,KAAK,OACLC,QAAS,SAAC1B,GACRA,EAAE2B,iBACF3B,EAAE4B,kBACFZ,OAA4Ba,QAIlC,cAACrB,EAAyB,UACvBI,EACC,cAACH,EAAW,CACVqB,IAAKb,EACLc,QAAS,SAAC/B,GACRA,EAAE2B,iBACFX,OAA4Ba,IAC5B,SAEF,wBAAQhD,IAAKgC,MAGf,cAACP,EAAW,CACVpC,aAAc0B,YAAoBd,EAAoBG,GACtD6C,IAAKb,EACLc,QAAS,SAAC/B,GACRA,EAAE2B,iBACFX,OAA4Ba,IAE9BG,MAAI,EACJC,aAAW,WAEX,wBAAQpD,IAAKgC,WAMrB,cAACX,EAAc,UACb,cAAC,IAAI,CACHuB,KAAK,OACLC,QAAS,SAAC1B,GACRA,EAAE2B,iBACF3B,EAAE4B,kBACFZ,EAA4BF,YASpCoB,EAA+B7E,UAAOC,IAAG,uCAAVD,CAAU,8EAGnC,gBAAG8E,EAAO,EAAPA,QAAO,OAAQA,EAAO,UAAMA,EAAO,MAAO,UAEzC,gBAAG3E,EAAK,EAALA,MAAK,uCAGlBA,EAAMmB,kBAAiB,gBAAQnB,EAAM4E,sBAAqB,eAG1DC,EAAgBhF,kBAAOiF,IAAWC,aAAY,uCAA9BlF,CAA8B,uGAMzCmF,IAAOC,SAGZhD,EAAqB,SAAH,OAAMC,EAAM,EAANA,OAAM,OAClC,mCACE,cAACwC,EAA4B,CAACC,QAASzC,EAAO,SAC5C,eAAC2C,EAAa,WACZ,sCACA,uBACA,iD,4PCzPFK,EAA6BrF,UAAOC,IAAG,uCAAVD,CAAU,4MAMlC,YAAS,SAANsF,OAAuB,OAAS,UACjC,YAAS,SAANA,OAAuB,UAAY,SAExC,YAAQ,SAALnF,MAEoB,0BAO5BoF,EAAwBvF,kBAAOU,KAAI,uCAAXV,CAAW,oHAE9B,YAAQ,SAALG,MAEoB,0BAOrBqF,EAAuB,SAAH,GAU1B,IATLC,EAAU,EAAVA,WACAC,EAAW,EAAXA,YACAC,EAAS,EAATA,UACAC,EAAW,EAAXA,YAOA,OAAIH,EACGC,EASH,cAACL,EAA0B,UACzB,cAAC,IAA2B,CAACQ,MAAM,OAAOxD,OAAO,OAAOyD,QAAQ,gBARhE,cAACT,EAA0B,UACzB,cAAC,IAAK,CAACjB,KAAM,OAYjBwB,EAEA,cAACP,EAA0B,CAACC,QAAQ,EAAK,SACvC,eAACC,EAAqB,WACpB,cAAC,IAAG,CAACnB,KAAM,KACVwB,EAAW,YAMfF,GAAeC,IAAcI,IAAYC,QAIvC,cAACX,EAA0B,UAAEY,YAAmBP,KAH9C,MAMLQ,EAAiBlG,kBAAOmG,KAAc,uCAArBnG,CAAqB,uCAGjC,YAAQ,SAALG,MAEW,iBAOnBiG,EAAsBpG,kBAAOU,KAAI,uCAAXV,CAAW,kCAKjCqG,EAAarG,kBAAOiF,IAAWqB,WAAU,uCAA5BtG,CAA4B,mBAIzCuG,EAAavG,kBAAOiF,IAAWuB,SAAQ,uCAA1BxG,CAA0B,2JAElC,YAAQ,SAALG,MAEW,iBACT,YAAQ,SAALA,MAEc,yBASpBsG,EAAU,SAAH,GAAoC,IAA9BC,EAAQ,EAARA,SACxB,OAAKA,EAASC,KAKZ,cAACJ,EAAU,UACT,eAAC,IAAgB,CACfK,KACE,eAAC,IAAG,WACF,cAACR,EAAmB,UAClB,qBAAK5E,IAAI,oBAAoBqE,MAAO,GAAIxD,OAAQ,OAElD,cAACgE,EAAU,0CAGfQ,UAAU,MAAK,eAEZC,YAAUJ,EAASC,WAhBnB,MAsBLI,EAA0B/G,kBAAOU,KAAI,uCAAXV,CAAW,oBAI9BgH,EAAa,WACxB,OACE,cAAC,IAAgB,CACfJ,KACE,cAAC,IAAWN,UAAS,UACnB,+CAGJO,UAAU,MAAK,SAEf,cAACE,EAAuB,UACtB,cAACb,EAAc,U,kCClKvB,kPAcKe,EAdL,kDAoBA,SAASC,EAAiBC,GACxB,OAAOA,EAAMC,UAAYD,EAAME,cAGjC,SAASC,EAAiBH,GACxB,OAAOA,EAAMI,aAGR,SAASC,EAAYL,GAC1B,MAAI,YAAaA,EAAa,eAAN,OAAsBA,EAAMM,QAAO,YAAIN,EAAM1D,QAAO,sBACxE,mBAAoB0D,EAAa,eAAN,OAAsBA,EAAMO,eAAeD,QAAO,YAAIN,EAAM1D,QAAO,mBAC3F,gBAeF,SAASkE,EACdR,EACAS,EACAjE,EACAlC,EACAG,EACAC,EACAC,GAEA,OArBF,SAA2BqF,GACzB,IAAIU,EAAiBZ,EAAea,MAQpC,OAPIX,EAAMI,eACJhE,YAAQ4D,EAAMI,cAChBM,EAAiBZ,EAAec,MACvBC,YAAQb,EAAMI,gBACvBM,EAAiBZ,EAAegB,QAG7BJ,EAYCK,CAAkBf,IACxB,KAAKF,EAAea,MAClB,OACE,cAAC,IAAQ,CACPtG,IAAK0F,EAAiBC,GACtB1F,mBAAoBA,EACpBG,sBAAuBA,EACvBC,eAAgBA,EAChBC,kBAAmBA,IAGzB,KAAKmF,EAAegB,MAClB,OACE,cAAC,IAAgB,CACfzG,IAAK0F,EAAiBC,GACtB3D,SAAU8D,EAAiBH,GAC3B1D,QAAS0D,EAAM1D,QACfC,WAAYkE,EACZjE,4BAA6BA,EAC7BlC,mBAAoBA,EACpBG,sBAAuBA,EACvBC,eAAgBA,EAChBC,kBAAmBA,IAGzB,KAAKmF,EAAec,MAClB,OACE,cAAC,IAAgB,CACfxE,SAAS,EACT/B,IAAK0F,EAAiBC,GACtB3D,SAAU8D,EAAiBH,GAC3B1D,QAAS0D,EAAM1D,QACfC,WAAYkE,EACZjE,4BAA6BA,EAC7BlC,mBAAoBA,EACpBG,sBAAuBA,EACvBC,eAAgBA,EAChBC,kBAAmBA,KAMtB,SAASqG,EACdC,EACAC,EACA5C,EACAvF,EACAmE,GAEA,OAAOiE,uBACL,SAAC3F,GAIC,GAHAA,EAAE4B,kBACF5B,EAAE2B,kBAEEpE,EAAJ,CAIA,IAAImE,EAKJ,OAAOoB,EAAa4C,IAAkBD,IAJpC/D,OAMJ,CAAC+D,EAAalI,EAAYmE,EAASgE,EAAe5C,IAI/C,SAASQ,EAAmBsC,GACjC,OAAQA,GACN,KAAKC,IAAQC,QACX,OAAO,cAAC,IAAsB,IAChC,KAAKD,IAAQE,UACX,OAAO,cAAC,IAAa,IACvB,KAAKF,IAAQG,KACX,OAAO,cAAC,KAAQ,IAClB,KAAKH,IAAQI,SACX,OAAO,cAAC,IAAY,IACtB,KAAKJ,IAAQK,MACX,OAAO,cAAC,IAAS,IACnB,KAAKL,IAAQM,KACX,OAAO,cAAC,IAAQ,IAClB,KAAKN,IAAQO,YACX,OAAO,cAAC,IAAwB,IAClC,QACE,OAAO,OAhIM,SAAd9B,OAAc,iBAAdA,IAAc,iBAAdA,IAAc,kBAAdA,MAAc,KAoIZ,IAAMrE,EAA2B,SACtCnB,EACAkB,EACAf,EACAC,EACAC,GAEA,GAAIL,IAAuBC,IAAoBC,QAAUC,EAAuB,CAC9E,IAAMS,EAASM,EAAEqG,cAAcC,aAEzBC,EADQvG,EAAEqG,cAAcG,YACF9G,IAGxBR,GAAkBA,IAAmBQ,IACvC6G,EAAc,GACdzH,IAAuBC,IAAoBC,QAC3CG,GAEAA,EAAkBO,GAIhBZ,IAAuBC,IAAoB0H,MAC7CxH,EAAsBsH,GAAe,EAAIxH,IAAoBC,OAASuH,IAC7DA,EAAczH,EAHR,KAGyCyH,EAAczH,EAHvD,OAIfG,EAAsBF,IAAoBC,QAC1CG,GAAqBA,OAAkB0C,MAKtC,SAASlC,EACdb,EACAI,GAEA,OAAOJ,IAAuBC,IAAoBC,QAAUF,IAAuBC,IAAoB0H,WACnG5E,EACA3C,EAGC,SAASU,EACdd,EACAG,GAEA,OAAOH,IAAuBC,IAAoBC,QAAWC,EAA8B,OAAN,M,4SCxLhF,SAASyH,IACd,OAJOC,YAAYC,IAAYC,gBAAiBC,IAAYC,WAIxBD,IAAYC,Q,oLCF3C,SAASC,EAAqBC,GACnC,OAAOA,EAAWC,QAAO,SAACC,GAAI,OAAKA,EAAKC,SAAWC,IAAcC,eAAaC,KAAI,SAACJ,GAAI,OAAKA,EAAK3C,SAiD5F,SAASgD,EACdC,EACAC,EACAC,GAEA,MAA8CC,YAAkCH,EAAiBC,GAAzFG,EAAkB,EAAlBA,mBAAoBC,EAAa,EAAbA,cACtBC,EAAwBF,GAAsBF,EAEpD,EAAiDK,YAA2BF,GAApEG,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAAcC,EAAW,EAAXA,YAE3BC,EAAYN,EAAcO,OAAS,EACnCC,EAAoBJ,EAAaG,OAAS,EAC1CE,EAAuBJ,EAAYE,OAAS,EAC5CG,EAAeF,GAAqBC,EAEpCE,EA7DR,SACEN,EACAD,EACAD,GAEA,MAAM,GAAN,mBACKE,EAAYZ,KAAI,SAACmB,GAAgB,MAAM,CACxClE,MAAOkE,EACPtB,OAAQC,IAAcC,iBACrB,YACAY,EAAaX,KAAI,SAACoB,GAAY,MAAM,CACrCnE,MAAOmE,EACPvB,OAAQC,IAAcuB,4BACrB,YACAX,EAAUV,KAAI,SAACsB,GAAc,MAAM,CACpCrE,MAAOqE,EACPzB,OAAQC,IAAcyB,eA6CNC,CAA2BZ,EAAaD,EAAcD,GACpEe,EAzCR,SACEZ,EACAI,EACAF,EACAP,GAEA,OAAKK,EAIDI,EACEF,EACKW,IAAUC,UAGZD,IAAUE,eAGfpB,EACKkB,IAAUG,cAGZH,IAAUI,qBAfRJ,IAAUK,cAkCGC,CAAqBnB,EAAWI,EAAcF,EAAmBP,GAEvF,MAAO,CAAEU,cAAaO,iBCtExB,SAASQ,EAAiBC,GACxB,MAAO,CACLC,OAAQC,IAAeC,IACvB7G,YAAa0G,EAAY1G,YAAY8G,cACrCC,SAAUL,EAAYM,MAAMC,MAC5BC,QAAS,CACPC,SAAUT,EAAYM,MAAMC,MAC5BG,UAAWV,EAAYM,MAAMK,SAC7BC,UAAWZ,EAAYM,MAAMC,MAC7BM,aAAc,MAEhBC,UAAWd,EAAYe,OAAOC,WAC9BC,SAAU,CACRC,GAAIlB,EAAYkB,GAChBC,SAAU,GACV9F,QAAS2E,EAAYoB,gBACrBC,UAAW,CACTZ,SAAUT,EAAYM,MAAMC,MAC5BG,UAAWV,EAAYM,MAAMK,SAC7BC,UAAWZ,EAAYM,MAAMC,MAC7BM,aAAc,MAEhBtH,UAAWyG,EAAYzG,UACvBlC,QAAS2I,EAAY3I,QACrB0J,OAAQf,EAAYe,OAAOC,WAC3B1H,YAAa0G,EAAY1G,YAAY8G,cACrCkB,YAAa,QASZ,SAASC,EACdC,EACAC,GAEA,IAAMxD,EAAQuD,EAAcvD,MAA0BuD,EAAcvD,MAPhDH,IAAIiC,GAOqD,GAC7E,MAAO,CACL9B,QACAuD,cAAe,CACbvD,QACAyD,YAAaD,OAAgBrJ,EAAYoJ,EAAcG,WAAWpB,MAClEqB,KAAMJ,EAAcK,SACpBC,GAAIN,EAAcO,Y,wECpCXC,GAAgBC,MAC3BC,qBACE,SAACC,GAAG,MAAM,CACRC,mBAAehK,EACfiK,qBAAiBjK,EACjBkK,iBAAkB,SAAC3B,GAAQ,OAAKwB,GAAI,iBAAO,CAAEC,cAAezB,OAC5D4B,mBAAoB,kBAAMJ,GAAI,iBAAO,CAAEC,mBAAehK,OACtDoK,mBAAoB,SAACH,GAAe,OAAKF,GAAI,iBAAO,CAAEE,0BAExD,CAAEI,KAAM,mBCTL,SAASC,KACd,IAAQC,EAAYC,yBAAZD,QAER,EAQIE,aACF,YAOe,MACR,CACLrF,WARU,EAAVA,WASAsF,aARY,EAAZA,aASAC,yBARwB,EAAxBA,yBASAC,4BAR2B,EAA3BA,4BASAC,SARQ,EAARA,SASAC,UARS,EAATA,UASAC,cARa,EAAbA,iBAUFC,WAzBYC,EAAmB,EAA/B7F,WACAsF,EAAY,EAAZA,aACAC,EAAwB,EAAxBA,yBACAC,EAA2B,EAA3BA,4BACUM,EAAW,EAArBL,SACWM,EAAY,EAAvBL,UACAC,EAAa,EAAbA,cAqBId,EAAkBL,IAAc,SAACwB,GAAK,OAAKA,EAAMnB,mBACjD7E,EAAaiG,mBAAQ,kBAAMC,YAAgCL,KAAsB,CAACA,IAExF,EAAwBM,cAAjBC,EAAuC,iBAA1B,GACdC,ECvCD,WAKL,IAAQvJ,EAAasI,yBAAbtI,SACFwJ,EAAkBC,aAAmB,SAACP,GAAK,OAAKA,EAAMM,mBACtDE,EAAyBC,aAAuB,SAACT,GAAK,OAAKA,EAAMQ,0BAEvE,EAIInB,aACF,YAAmC,MAAQ,CACzCK,UADU,EAATA,UAEDgB,eAF0B,EAAdA,eAGZC,MAHiC,EAALA,SAK9Bf,KATWG,EAAY,EAAvBL,UACAgB,EAAc,EAAdA,eACOE,EAAQ,EAAfD,MAUF,OAAOjI,sBAAW,uCAChB,WAAOmI,EAA4BC,GAAgC,qFAA6B,GAA3BpG,EAAmB,gCACjF5D,EAAS,CAAD,gEAEkBwJ,EAC7BxJ,EAASiK,YACTD,EACAD,EACAnG,GACD,QALKsG,EAAgB,UAQpBjB,GAAa,GACbS,EAAuBQ,GACvBN,EAAe,CAAEO,aAAa,IAC9BL,KACD,2CACF,qDAjBe,GAkBhB,CAAC9J,EAAU8J,EAAUN,EAAiBI,EAAgBX,EAAcS,IDD/CU,GAEjBC,EAAwBzI,uBAAY,WACxC6G,GAA4BC,GAA4B,IACvDM,GAAeC,GAAa,GAC7BT,EAAatD,IAAUoF,kBACtB,CAACtB,EAAaP,EAA0BQ,EAAcT,EAAcE,IAEvE,OAAO9G,sBAAW,sBAAC,sBAAA2I,EAAA,sDACjBF,IAEAf,EAAc,CACZkB,UAAW,CACTC,cAAepC,GAAoB,GACnCqC,UAAWC,YAA+BzH,GAC1C0H,YAAa7C,QAAoCjK,GAEnD+M,YAAa,SAACvD,GACZ,IAAKA,EAAKwD,WAAaxD,EAAKwD,SAASnH,MAGnC,OAFA6E,EAAatD,IAAUK,oBACvB0D,GAAa,GAIf,IAAMvF,EAAkBT,EAAqBC,GACvCU,IAAwBmE,EAC9B,EAAiCd,EAAmBK,EAAKwD,SAAUlH,GAA3DD,EAAK,EAALA,MAAOuD,EAAa,EAAbA,cAEf,EAAuCzD,EAAgBC,EAAiBC,EAAOC,GAAvEc,EAAW,EAAXA,YAAaO,EAAa,EAAbA,cAKrB,GAHA4D,EAAcnE,GACd8D,EAAavD,GAETA,IAAkBC,IAAUI,qBAG9B,OAFAiE,EAAerC,EAAexD,EAAiBE,QAC/CqF,GAAa,GAIfA,GAAa,MAEf,2CACD,CACDZ,EACAiB,EACApG,EACAqG,EACAc,EACApB,EACAT,EACAK,EACAd,I,sBEIJ,SAASgD,GAAqBC,GAC5B,OAAO,2BAhFA,CACLC,YAAa,CACXxE,QAH+ByE,EAkFF,CAAED,YAAaD,EAAKC,YAAaE,aAAcH,EAAKG,eA/E7DF,YAAYG,SAAS1E,WACzC2E,MAAO,CACLtK,QAASmK,EAAYD,YAAY5E,SAASiF,QACtCJ,EAAYD,YAAY5E,SAAStF,QACjC,6CACJwK,QAASL,EAAYD,YAAY5E,SAASkF,QAC1C1E,SAAUqE,EAAYD,YAAY5E,SAASQ,SAC3C2E,SAAUN,EAAYD,YAAY5E,SAASmF,WAG/CL,aAAc,CACZ1E,OAAQyE,EAAYC,aAAaC,SAAS1E,WAC1C2E,MAAO,CACLtK,QAASmK,EAAYC,aAAa9E,SAASiF,QACvCJ,EAAYC,aAAa9E,SAAStF,QAClC,6CACJwK,QAASL,EAAYC,aAAa9E,SAASkF,QAC3C1E,SAAUqE,EAAYC,aAAa9E,SAASQ,SAC5C2E,SAAUN,EAAYC,aAAa9E,SAASmF,aA6DkD,IAClGC,OAPgBA,EAOET,EAAKrH,MAAM8H,MANxBA,EAAMjI,KAAI,SAACkI,GAAI,OAlDxB,SAAmBA,GACjB,IAAMC,EAAS,QAASD,EAExB,MAAO,CACLE,KAAOD,OAqBH7N,EApBA,CACE+N,aAAc,CACZpF,OAAQiF,EAAKI,SAASV,SAAS1E,WAC/B2E,MAAO,CACLtK,QAAS2K,EAAKK,OAAOhL,QACrBwK,QAASG,EAAKK,OAAOR,QACrB1E,SAAU6E,EAAKK,OAAOlF,SACtB2E,SAAUE,EAAKK,OAAOP,WAG1BQ,aAAc,CACZvF,OAAQiF,EAAKO,SAASb,SAAS1E,WAC/B2E,MAAO,CACLtK,QAAS2K,EAAKQ,OAAOnL,QACrBwK,QAASG,EAAKQ,OAAOX,QACrB1E,SAAU6E,EAAKQ,OAAOrF,SACtB2E,SAAUE,EAAKQ,OAAOV,YAKhCE,KAAMC,EACF,CACEQ,IAAKT,EAAKS,IACVC,UAAWV,EAAKU,UAAU1F,WAC1B2F,aAAcX,EAAKW,aAAa3F,WAChC4F,YAAaZ,EAAKY,YAAY5F,WAC9B6F,OAAQ,CACNxL,QAAS2K,EAAKK,OAAOhL,QACrBwK,QAASG,EAAKK,OAAOR,QACrB1E,SAAU6E,EAAKK,OAAOlF,SACtB2E,SAAUE,EAAKK,OAAOP,UAExBgB,OAAQ,CACNzL,QAAS2K,EAAKQ,OAAOnL,QACrBwK,QAASG,EAAKQ,OAAOX,QACrB1E,SAAU6E,EAAKQ,OAAOrF,SACtB2E,SAAUE,EAAKQ,OAAOV,gBAG1B1N,GAKqB2O,CAAUf,SADvC,IAAoBD,EA5EiBP,ECdtB,SAASwB,GACtBC,EACAC,EACAC,GAEA,IAAM3E,EAAqBR,IAAc,SAACwB,GAAK,OAAKA,EAAMhB,sBACpD4E,IAAcH,GAASA,EAAMI,OAC7BC,IAAmBL,KAAWA,EAAM1B,aAAe0B,EAAM1B,YAAY5E,SAASiF,QAC9E2B,IAAiBJ,KAAqBD,EAE5CtP,qBAAU,WACR,GAAKwP,GAAcE,GAAmBC,EAAtC,CAKA,IAAMC,EAAWC,SAASN,EAAgBO,SAAS,KAAKC,cAAc,IAEtE,EDmFG,SAAkCV,GAKvC,IAMwB,EANlBW,EAAqD,GACrDC,EAAkD,GAClDC,EAAkD,GAElDC,EAAQd,EAAMc,MAAK,eAENA,GAAK,IAAxB,2BAA0B,CAAC,IAAhBzC,EAAI,QACTA,EAAKrH,MAAM+J,WAAaC,YAASC,MACnCN,EAA2BO,KAAK9C,GAAqBC,IAC5CA,EAAKrH,MAAM+J,WAAaC,YAASG,GAC1CP,EAAwBM,KAAK9C,GAAqBC,IAElDwC,EAAwBK,KAAK9C,GAAqBC,KAErD,8BAED,MAAO,CACLsC,2BAA4BA,EAA2BhJ,OAAS,EAAIgJ,OAA6BxP,EACjGyP,wBAAyBA,EAAwBjJ,OAAS,EAAIiJ,OAA0BzP,EACxF0P,wBAAyBA,EAAwBlJ,OAAS,EAAIkJ,OAA0B1P,GC1GtFiQ,CAAyBpB,GADnBW,EAA0B,EAA1BA,2BAA4BC,EAAuB,EAAvBA,wBAAyBC,EAAuB,EAAvBA,wBAGvDT,EAAgC,CACpCiB,YAAaV,EACbW,UAAWC,IAAeC,YAC1BC,SAAUb,EACVc,SAAUb,GAGNc,EACJ,oBAAqB1B,GAAaA,EAAU2B,gBACxC,CACEC,QAAS,CACP/H,OAAQmG,EAAU2B,gBAAgBC,QAAQ/H,OAAOC,WACjD+H,WAAY7B,EAAU2B,gBAAgBC,QAAQC,WAAW/H,WACzDgI,MAAO9B,EAAU2B,gBAAgBC,QAAQE,MAAMhI,WAC/C2E,MAAOuB,EAAU2B,gBAAgBC,QAAQnD,OAE3CsD,YAAa/B,EAAU2B,gBAAgBI,YAAYjI,WACnDkI,UAAWhC,EAAU2B,gBAAgBK,UACrCC,QAASjC,EAAU2B,gBAAgBM,cAErC/Q,EAENoK,EAAmB,CACjB4G,OAAQR,EACRvB,SACAgC,6BAA8B7B,EAC9B8B,YAAa,CACXvI,OAAQkG,EAAM1B,YAAYG,SAAS1E,WACnC2E,MAAO,CACLtK,QAAS4L,EAAM1B,YAAY5E,SAAStF,QACpCwK,QAASoB,EAAM1B,YAAY5E,SAASkF,QACpC1E,SAAU8F,EAAM1B,YAAY5E,SAASQ,SACrC2E,SAAUmB,EAAM1B,YAAY5E,SAASmF,kBAzCzCtD,OAAmBpK,KA6CpB,CAAC8O,EAAWC,EAAiBI,EAAcD,EAAgBF,EAAW5E,EAAoByE,I,qCClDxF,SAASsC,GAAetC,GAC7B,IAAMlT,EAAQyV,qBAEd,OAAO/F,mBAAQ,WACb,IAAMgG,EAAoBxC,EAAQyC,aAA2BzC,QAAS7O,EAChEuR,EAAqBF,EAAoBG,aAAsBH,QAAqBrR,EACpFyR,EACmB,UAAvBF,EAEE5V,EAAM+V,eACmB,YAAvBH,EAEF5V,EAAMgW,mBACJ3R,EAEN,OAAOqR,GAAqBE,GAAsBE,EAC9C,CACEG,oBAAqB,CACnBC,KAAMN,EACNO,MAAOL,GAETM,kBAAmB,kBAO7B,SAAgCC,GAA+B,IAAD,EACtDC,EAAOD,EAAYE,SAAS,GAAK,IAAM,GAE7C,GADoBC,OAAOH,EAAYI,WAAaD,OAAOH,EAAYK,aAAgB,IACtE,KACf,MAAO,QAET,IAAMC,EAASC,WAAmC,QAAzB,EAACP,EAAY1C,UAAU,UAAE,aAAxB,EAA0BkD,QAAQ,IAC5D,MAAM,GAAN,OAAUP,GAAI,OAAGK,EAAM,KAdUG,CAAuBpB,UAElDrR,IAEN,CAACrE,EAAM+V,eAAgB/V,EAAMgW,cAAe9C,I,4ECCxC6D,GAAkBlX,UAAOC,IAAG,uCAAVD,CAAU,uBAI5BmX,GAASnX,UAAOC,IAAG,uCAAVD,CAAU,gLACC,YAAQ,SAALG,MAEA,qBAClB,YAAQ,SAALA,MAES,eASjBiX,GAAepX,kBAAOqX,KAAO,uCAAdrX,CAAc,yCAEf,YAAuB,SAApBsX,qBAAmD,OAAS,UAG7EC,GAAcvX,kBAAOU,KAAI,uCAAXV,CAAW,8DAMzBwX,GAAcxX,kBAAOqX,KAAO,uCAAdrX,CAAc,uCAK5ByX,GAAczX,kBAAOmG,MAAc,uCAArBnG,CAAqB,gDAKnC0X,GAAc1X,kBAAOiF,KAAWC,aAAY,uCAA9BlF,CAA8B,uHAEvC,YAAS,SAAN2X,UAORC,GAAa5X,kBAAOiF,KAAWuB,SAAQ,uCAA1BxG,CAA0B,oGAClC,YAAS,SAAN2X,UAORE,GAAgB7X,kBAAOU,KAAI,uCAAXV,CAAW,6BAK3B8X,GAAY9X,UAAO+X,OAAM,uCAAb/X,CAAa,kPAEf,YAAmB,SAAhBgY,oBACR,YAAS,SAANL,UAiBRM,GAAoBjY,kBAAOkY,KAAc,wCAArBlY,CAAqB,8DAMzCmY,GAAuBnY,kBAAOU,KAAI,wCAAXV,CAAW,qEAOlCoY,GAAiBpY,kBAAOU,KAAI,wCAAXV,CAAW,iCAK5BqY,GAAYrY,kBAAOiF,KAAWC,aAAY,wCAA9BlF,CAA8B,0JAoB1CsY,GAAe,SAAH,GAM2B,IAL3CjY,EAAQ,EAARA,SACAG,EAAQ,EAARA,SACA6D,EAAO,EAAPA,QACAkU,EAAe,EAAfA,gBACAC,EAAS,EAATA,UAEA,OACE,eAACV,GAAS,CAACzX,SAAUA,EAAUgE,QAASA,EAAS2T,iBAAkBO,EAAiBZ,OAAQa,EAAU,SACnGhY,KASDiY,GAAU,SAAH,GAAiE,IAA3DnC,EAAK,EAALA,MAAO9V,EAAQ,EAARA,SACxB,OAAKA,EAIH,gBAACkX,GAAW,CAACgB,SAAS,OAAOC,WAAW,OAAOhB,OAAQrB,EAAM,UAC3D,eAACmB,GAAW,IACXjX,KALI,MAULoY,GAAS,SAAH,GAAiE,IAA3DpY,EAAQ,EAARA,SAAU8V,EAAK,EAALA,MAC1B,OAAK9V,EAIH,eAACoX,GAAU,CAACe,WAAW,OAAOhB,OAAQrB,EAAM,SACzC9V,IAJI,MASLqY,GAAqB,SAAH,GAYjB,IACsB,EAZ3BvB,EAAoB,EAApBA,qBACAwB,EAAa,EAAbA,cACAC,EAAc,EAAdA,eACAC,EAAU,EAAVA,WACA3F,EAAK,EAALA,MAQA,OAAKiE,EASD0B,IAAeC,KAAWC,QAE1B,eAAC,KAAWhU,YAAW,CAACoR,MAAM,eAAeqC,WAAW,OAAOQ,WAAW,MAAK,SAC7E,+CAMJ,eAACd,GAAS,CAAC/B,MAAO0C,IAAeC,KAAWG,QAAU,eAAiB,cAAc,SAClFC,YAAgC,OAALhG,QAAK,IAALA,OAAK,EAALA,EAAO1B,YAAY2H,aAjB/C,gBAAC,KAAWpU,YAAW,CAACyT,WAAW,OAAOQ,WAAW,MAAK,UACvDI,YAAmBT,EAAc1L,YAAW,OAChB,QADgB,EACxB,OAAd2L,QAAc,IAAdA,OAAc,EAAdA,EAAgBS,cAAM,QAAI,UAoBnCC,GAAY,SAAH,GAUR,IATLC,EAAS,EAATA,UACAlD,EAAW,EAAXA,YACAwC,EAAU,EAAVA,WACA1B,EAAoB,EAApBA,qBAOA,OAAKoC,EASH,gBAACvB,GAAoB,WAClB3B,GACC,qCACE,eAAC,IAAgB,CAAC5P,KAAM,sFAAgF,SACtG,gBAACwR,GAAc,WACb,eAAC,KAAa,CAAC9B,MAAOE,EAAYJ,oBAAoBE,MAAOlS,KAAK,SAClE,gBAAC,KAAWkC,UAAS,CAACqT,MAAO,CAAErD,MAAOE,EAAYJ,oBAAoBE,OAASqC,WAAW,OAAM,cAC7F,uCAAQnC,EAAYD,uBAA4B,cAM3D,eAAC,KAAWjQ,UAAS,CAACgQ,MAAM,eAAeqC,WAAW,OAAM,mBACtDU,YAAoC,OAATK,QAAS,IAATA,OAAS,EAATA,EAAWJ,WAAW,UAtBrDhC,GAAyB0B,IAAeC,KAAWW,SAAWZ,IAAeC,KAAWY,eAIrF,eAAC5B,GAAiB,IAHhB,MAgCP6B,GAAuB,CAC3BlO,IAAUoF,eACVpF,IAAUI,qBACVJ,IAAUmO,qBACVnO,IAAUoO,wBAGCC,GAAY,SAAH,GAA6D,IAAD,EAAtDC,EAAc,EAAdA,eAAgBC,EAAe,EAAfA,gBACpCC,EAAqBC,cACrBla,EAAQyV,qBACd,EAAwC5G,yBAAhCD,EAAO,EAAPA,QAASkD,EAAO,EAAPA,QAASqI,EAAS,EAATA,UACpBC,EAAYC,QAAQzL,GAAWkD,GAC/B6G,EAAgB2B,cAChBC,EAA2BrR,IAC3BmF,EAAgBJ,IAAc,SAACwB,GAAK,OAAKA,EAAMpB,iBAC/CE,EAAmBN,IAAc,SAACwB,GAAK,OAAKA,EAAMlB,oBAClDiM,EAAkBC,YAAY,OAC9BC,EAAuBC,YACpB,OAAP/L,QAAO,IAAPA,SAAWvK,EACTgK,GAAiBA,EAAcwD,QAAUxD,OAAgBhK,GAE7D,EAKIyK,aACF,YAAoD,MAAQ,CAC1DI,SADS,EAARA,SAED0L,UAFoB,EAATA,UAGXzK,eAHoC,EAAdA,eAItBpB,aAJkD,EAAZA,gBAMxCM,WAXUE,EAAW,EAArBL,SACA0L,EAAS,EAATA,UACAzK,EAAc,EAAdA,eACApB,GAAY,EAAZA,aAUF,GAAkDnN,oBAAS,GAAM,qBAA1DiZ,GAAiB,MAAEC,GAAoB,MACxCC,GAAYpB,GAAqBqB,SAASJ,GAC1ChC,GAA8B,OAAbvK,QAAa,IAAbA,IAAiBmM,EAClCrD,KAAyB9I,GAAiBkM,GAA4BzI,IAAYmJ,IAAiBC,WC5TpG,SAAsCnB,GAC3C,IAAMoB,EAAmBnL,aAAmB,SAACP,GAAK,OAAKA,EAAMA,SACvD2L,EAAsBpL,aAAmB,SAACP,GAAK,OAAKA,EAAM4L,YAC1DC,EAAsB5X,iBAAOyX,GACnC,EAAkDrM,aAChD,YAA0C,MAAQ,CAChDqB,eADe,EAAdA,eAEDpB,aAF6B,EAAZA,aAGjBI,UAHwC,EAATA,aAKjCE,WANMN,EAAY,EAAZA,aAAyBS,EAAY,EAAvBL,UAStBtL,qBAAU,WACRmM,IAAmBuL,WAAU,SAAC9L,GAAK,OAAM6L,EAAoBxX,QAAU2L,EAAMA,WAC5E,IAEH5L,qBAAU,WACJyX,EAAoBxX,UAAY0X,IAAYC,YAAY1M,EAAatD,IAAUoO,wBAC/EyB,EAAoBxX,UAAY0X,IAAYE,QAAUJ,EAAoBxX,UAAY0X,IAAYG,UAChGL,EAAoBxX,UAAY0X,IAAYG,QAC9C5M,EAAatD,IAAUmQ,SAClB7M,EAAatD,IAAUE,gBAC9ByP,EAAoBI,IAAYK,KAEhCrM,GAAa,GACbuK,GAAe,MAGhB,CAACvK,EAAcT,EAAcgL,EAAgBqB,EAAqBE,EAAoBxX,UDiSzFgY,CAA6B/B,GAC7B,IAAMgC,GAAcpN,KAEdqN,GAAqBtM,mBAAQ,WACjC,OAAOuM,YAAuBC,sBAAYvD,EAAc1L,YAA4B,OAAfuN,QAAe,IAAfA,SAAmBnW,KACvF,CAACmW,EAAiB7B,IACrB,GErUa,SACbtK,EACA2N,GAOA,MAAyBG,YAAaC,YAAUC,aAAcL,EAAiC,OAAb3N,QAAa,IAAbA,SAAiBhK,GAA3FoL,EAAK,EAALA,MAAOyD,EAAK,EAALA,MACTE,EAAkBkJ,YAAyBpJ,GAC3CqJ,EAAkB7M,mBAAQ,WAC9B,IAAM6M,EAAuB,OAALrJ,QAAK,IAALA,OAAK,EAALA,EAAOqJ,gBAAgBnJ,GAC/C,OAAsB,OAAfmJ,QAAe,IAAfA,OAAe,EAAfA,EAAiB3P,SAASiF,SAAW0K,OAA4ClY,IACvF,CAAC+O,EAAiBF,IAErB,OAAOxD,mBAAQ,WACb,MAAO,CACLD,QACAyD,QACAqJ,kBACAnJ,qBAED,CAACA,EAAiBmJ,EAAiB9M,EAAOyD,IFmTzCsJ,CAAkCrF,GAAuB9I,OAAgBhK,EAAW2X,IAJ/EnD,GAAU,GAAjBpJ,MACAyD,GAAK,GAALA,MACAqJ,GAAe,GAAfA,gBACAnJ,GAAe,GAAfA,gBAEF,GGxUa,SACbpG,EACAyP,EACAtc,GAEA,IAAQ2R,EAAYjD,yBAAZiD,QAEFqB,EAAYuJ,YAChBvc,EAAuB,OAAbsc,QAAa,IAAbA,KAAwB,OAANzP,QAAM,IAANA,OAAM,EAANA,EAAQJ,SAASiF,SAAW7E,OAAmC3I,OAAaA,EACxGlE,GAAW2R,EAAU6K,oCAAyB7K,QAAWzN,GAErDuY,EAAoBzJ,EAAU1D,QAAUoN,IAAeC,UAAY3J,EAAUyJ,kBACnF,EAAoDhb,oBAAS,GAAM,mBAA5Dmb,EAAkB,KAAEC,EAAqB,KAC1CC,EAAkB9U,sBAAW,sBAAC,sBAAA2I,EAAA,sDAEP,OAD3BoM,mBAAU/J,EAAU1D,QAAUoN,IAAeC,UAC7CE,GAAsB,GAAK,kBAEnB7J,EAAUgK,mBAAkB,OAClCC,6BAAmBC,qBAAmBC,4BAA6B,CACjEC,SAAUzL,EACV0L,aAA2B,OAAbf,QAAa,IAAbA,OAAa,EAAbA,EAAe7P,SAASyM,OACtCoE,cAA4B,OAAbhB,QAAa,IAAbA,OAAa,EAAbA,EAAe7P,SAAStF,UACvC,gDAEFoW,QAAQC,MAAM,EAAD,IAAG,QAEY,OAFZ,UAEhBX,GAAsB,GAAM,4EAE7B,CAAC7J,EAAWrB,EAAsB,OAAb2K,QAAa,IAAbA,OAAa,EAAbA,EAAe7P,SAAStF,QAAsB,OAAbmV,QAAa,IAAbA,OAAa,EAAbA,EAAe7P,SAASyM,SAEjF,OAAO3J,mBAAQ,WACb,MAAO,CACLyD,YACAyJ,oBACAG,qBACAE,qBAED,CAAC9J,EAAW4J,EAAoBH,EAAmBK,IHmSwBW,EACvE,OAAL1K,SAAK,IAALA,QAAK,EAALA,GAAO1B,YAAY5E,SAASiF,SAAgB,OAALqB,SAAK,IAALA,QAAK,EAALA,GAAO1B,iBAAwCnN,EACtFkY,GACAhC,GAHMpH,GAAS,GAATA,UAAW4J,GAAkB,GAAlBA,mBAAoBH,GAAiB,GAAjBA,kBAAmBK,GAAe,GAAfA,gBAK1DhK,GAAuBC,GAAOC,GAAWC,IACzC,IAAMiD,GAAcb,GAAetC,IAE7B2K,GAAsBC,YAAwB,OAAL5K,SAAK,IAALA,QAAK,EAALA,GAAO1B,aAChDuM,GAAuBD,YAAmB9B,IAC1CzC,GAAYpC,GAAuB0G,GAAsBE,GAE9CC,GAAiBC,eAA1BC,QACFC,GAAoBzO,mBAAQ,WAChC,GAAK0K,GAAatI,IAAYmJ,IAAiBC,UAA/C,CAIA,GAAI7M,EAAe,CACjB,IAAMmD,EAAmB,OAAL0B,SAAK,IAALA,QAAK,EAALA,GAAO1B,YAE3B,IAAKkJ,IAAyBlJ,EAC5B,OAGF,OAAQkJ,EAAqBnE,SAAS/E,GAGxC,OAAO4M,qBAAWJ,IAAcK,IAAI1F,MACnC,CAACyB,EAAWtI,EAASzD,EAAe2P,GAAcrF,EAAoB,OAALzF,SAAK,IAALA,QAAK,EAALA,GAAO1B,YAAakJ,IAExF7W,qBAAU,WACRkL,GAAatD,IAAUK,iBACtB,CAACuC,EAAeU,KAEnB,OAUIW,mBAAQ,WACV,IAAI4O,EAAoDvC,GACpDwC,EAAa,gDACbre,GAAW,EACXse,OAAcna,EAEdoa,EAAmBze,EAAMgW,cACzB0I,OAAara,EAEbsa,EAAkB3e,EAAM4e,cAExBC,EAAc7e,EAAM8e,aAEpBC,EAAkB/e,EAAMgf,uBA0E5B,OAxEI5E,GAAatI,IAAYmJ,IAAiBC,WAC5CoD,EAAc,kBAAMW,aAAY9E,EAAWc,IAAiBC,YAC5DqD,EAAa,2CACbre,GAAW,EACXse,EAAc,2CACiB,IAAtBL,IACTI,EAAa,+BACbre,GAAW,EACXse,EAAc,+CACL5D,IAAcnP,IAAUmQ,QACjC4C,EAAc,mEACJpE,EAODQ,IAAcnP,IAAUmO,sBAAwBgB,IAAcnP,IAAUI,sBACjF3L,GAAW,EACXqe,EAAa,8CACJ3D,IAAcnP,IAAUoO,wBACjC3Z,GAAW,EACXqe,EAAa,gDACJpH,IAAwB0B,KAAeC,KAAWoG,OAC3Dhf,GAAW,EACXqe,EAAa,0CAET1F,KAAeC,KAAWW,UAC5B8E,EAAa,gCAGX1F,KAAeC,KAAWY,iBAC5B6E,EAAa,kDAEbM,EAAc7e,EAAM4E,sBAEpBma,EAAkB/e,EAAMmf,YACxBT,EAAa,iFAENvL,GAAU1D,QAAUoN,IAAeC,UAAY3J,GAAU1D,QAAUoN,IAAe9D,SAC3FuF,EAAc,kBAAMrB,MACpB/c,EAAW6c,IAAsBH,IAAqBzJ,GAAU1D,QAAUoN,IAAe9D,QAErF5F,GAAU1D,QAAUoN,IAAe9D,QACrCwF,EAAa,6CACJxB,GACTwB,EAAa,kDACJ3B,GACT2B,EAAa,6CAEbG,EAAa,oEACbH,EAAa,qCAEN3D,IAAcnP,IAAUG,eACjC1L,GAAW,EAEXue,EAAmBze,EAAM8e,aACzBN,EAAc,yCACdD,EAAa,gCACJlI,IAAwD,UAAzCA,GAAYJ,oBAAoBC,MACxDhW,GAAW,EACX2e,EAAcxI,GAAYJ,oBAAoBE,MAC9CuI,EAAa,gDACbC,EAAkBtI,GAAYJ,oBAAoBE,MAClDoI,EAAa,wCACkB,IAAtBJ,KACTje,GAAW,EACXqe,EAAa,+BACbG,EAAavH,GAAuB,mFAAoE9S,IAzDxGia,EAAc,WACZrE,IACA9J,EAAe,CAAEO,aAAa,KAEhCxQ,GAAW,EACXqe,EAAa,2CAuDR,CACLA,aACAQ,kBACA7e,WACAse,cACAC,mBACAC,aACAC,kBACAL,cACAO,iBAED,CACD9C,GAEA/b,EAAMgW,cAENhW,EAAM4e,cAEN5e,EAAM8e,aAEN9e,EAAMgf,uBAENhf,EAAM4E,sBAEN5E,EAAMmf,YACN/E,EACAtI,EACAqM,GACAvD,EACAzD,GACA0B,GACA1F,GAAU1D,MACV4G,GACA8D,EACAF,EACA9J,EACA4M,GACAH,GACAK,KAtIAsB,GAAU,GAAVA,WACAQ,GAAe,GAAfA,gBACA7e,GAAQ,GAARA,SACAse,GAAW,GAAXA,YACAC,GAAgB,GAAhBA,iBACAC,GAAU,GAAVA,WACAC,GAAe,GAAfA,gBACAL,GAAW,GAAXA,YACAO,GAAW,GAAXA,YAiIIO,GAAoB,aACxBC,UAAoB,OAAT9F,SAAS,IAATA,QAAS,EAATA,GAAWJ,UACtBmG,cAAejR,GACZ2L,GAGL,OACE,gBAACjD,GAAe,WACd,gBAACC,GAAM,WACJuD,GACC,gBAACtD,GAAY,CAACsI,IAAI,KAAKpI,qBAAsBoD,EAAyB,UACpE,gBAACnD,GAAW,WACV,gBAACF,EAAA,EAAM,CAACqI,IAAI,KAAI,UACd,eAAC,KAAWC,eAAc,UACxB,sCAEF,gBAAC9H,GAAa,CACZxT,QAAS,WACFqL,IACHuL,IAAqB,GACrBsC,6BAAmBqC,eAAaC,kCAElC,UAEF,eAACC,EAAA,EAAY,CAAC/S,SAAUgM,GAAgB3U,KAAK,SAC7C,eAAC,KAAW2b,cAAa,CAAC5G,WAAY,IAAKR,WAAW,OAAM,SAC3C,OAAdI,SAAc,IAAdA,QAAc,EAAdA,GAAgBS,SAEnB,eAAC,KAAW,CAACpV,KAAM,GAAIkS,MAEnCnW,EAAM4e,sBAGE,gBAACvH,GAAW,CAACkI,IAAI,KAAI,UACnB,eAAC,KAAWC,eAAc,CAACK,aAAa,MAAK,SAC3C,mCAEF,eAAC,GAAkB,CACjB1I,qBAAsBA,GACtBwB,cAAeA,EACfC,eAAgBA,GAChBC,WAAYA,GACZ3F,MAAOA,WAIb,eAAC,GAAS,CACRqG,UAAWA,GACXlD,YAAaA,GACbwC,WAAYA,GACZ1B,qBAAsBA,SAI1BoD,GACA,gBAACtD,GAAY,CAACsI,IAAI,KAAI,UACpB,gBAAChf,EAAA,EAAG,CAACuf,QAAQ,gBAAe,UAC1B,+BACE,eAAC,KAAWF,cAAa,sBAE3B,+BACE,gBAAC,KAAWA,cAAa,WACtBxG,YAAmBT,EAAc1L,YAAW,OAChB,QADgB,EACxB,OAAd2L,SAAc,IAAdA,QAAc,EAAdA,GAAgBS,cAAM,QAAI,cAIvC,eAAC,GAAS,CACRE,UAAWA,GACXlD,YAAaA,GACbwC,WAAYA,GACZ1B,qBAAsBA,QAI5B,gBAAC,aAAU,CACT4I,OAAQ,CAACC,eAAa9b,SACtBwK,KAAM+Q,eAAaQ,gBACnBC,QAASC,uBAAqBC,uBAC9BC,WAAU,eAAOjB,IACjBkB,oBAAqBlG,IAAcla,GAAS,UAE5C,eAAC,GAAO,CAACiW,MAAOsI,GAAiB,SAAED,KACnC,eAAC,GAAM,CAACrI,MAAOwI,GAAgB,SAAED,KACjC,gBAAC,GAAY,CACXxa,QAASoa,GACTpe,SAAUA,IAAY6a,GACtB3C,gBAAiByG,GACjBxG,UAAW0G,GAAgB,UAE1BhE,IAAa,eAAC,IAAM,CAAC9W,KAAK,OAAOsc,OAAO,UACxChC,YAIP,eAACiC,EAAA,EAAmB,CAClBC,OAAQ5F,GACR6F,UAAW,kBAAM5F,IAAqB,IACtC6F,iBAAkB,SAAC/T,GACjB2B,EAAiB3B,EAASmF,cAAW1N,EAAYuI,GAC7CA,EAASiF,SACXuL,6BAAmBqC,eAAamB,uBAAwB,CACtDnD,cAAe7Q,EAAStF,QACxBkW,aAAc5Q,EAASyM,UAI7BwH,iBAAgC,OAAdjI,SAAc,IAAdA,WAAkBvU,EACpCyc,+BAA+B,Q,kHIvmBjCC,GAAOC,oBAAS,oHAQhBC,GAASphB,UAAOqhB,OAAM,uCAAbrhB,CAAa,oIAGLkhB,GACRA,IAEH,YAAQ,SAAL/gB,MAES,gBAEXmhB,GAAc,WAGzB,OACE,eAACC,GAAA,EAAG,CAACC,QAAQ,OAAOC,SAAS,WAAU,SACrC,sBAAKpf,OAAO,OAAOwD,MAAM,OAAM,SAC7B,eAACub,GAAM,CACLM,YAAW,UANJ,KAOPC,cAAc,QACdhI,MAAO,CACLiI,UAAW,gBACXC,gBAAiB,WAEnBC,KAAK,cACLC,EAAE,MACFC,GAAG,MACHC,GAAG,a,mDClCFC,I,eAAS,sGAITC,GAAc,0CACdC,GAAiB,WAEjBC,GAAY,2DACZC,GAAiB,qEACjBC,GAAO,YCeLC,GAAexiB,kBAAOyiB,MAAY,uCAAnBziB,CAAmB,4FAOzC0iB,GAAe1iB,kBAAOyiB,MAAY,uCAAnBziB,CAAmB,4EAOlC2iB,GAAqB3iB,UAAOC,IAAG,uCAAVD,CAAU,qKAcxB4iB,GAAoB,SAAH,OAAMve,EAAO,EAAPA,QAAO,OACzC,eAACse,GAAkB,CAACte,QAASA,EAAQ,SACnC,eAAC,KAAiB,OAIhBjC,GAAqB,WAAH,OACtB,eAACmf,GAAA,EAAG,CAACE,SAAS,WAAWoB,WAAW,oBAAoBC,UAAWC,GAAmB,SACpF,gBAACxB,GAAA,EAAG,CACFE,SAAS,WACTuB,UAAU,SACVC,KAAK,MACLC,IAAI,MACJvJ,MAAO,CAAEiI,UAAW,8BACpBtL,MAAM,UACNoC,SAAS,KACTS,WAAW,SAAQ,kBAGnB,wBAAM,MAEN,wBAAM,kBAeCgK,GAAS,SAAH,GAAwF,IAAD,EAAjFhc,EAAK,EAALA,MAAOic,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAAYC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAC5E,EAAsCzhB,oBAAS,GAAM,mBAA9C0hB,EAAW,KAAE1f,EAAc,KAClC,EAAgDhC,oBAAUoF,EAAME,eAAc,mBAAvEqc,EAAgB,KAAEC,EAAmB,KAE5C,EAAsC5hB,oBAAS,GAAM,mBAA9C6hB,EAAW,KAAEC,EAAc,KAC5BC,EAAmBxb,uBAAY,kBAAMub,GAAe,KAAO,IAC3DE,EAAmBzb,uBAAY,kBAAMub,GAAe,KAAQ,IAC5DG,EAAmBxJ,QAAQ8I,GAAcM,IAAgBJ,GAEzDS,EAAgB9c,EAAM+c,iBAAmB/c,EAAM+c,iBAAiBrX,SAAW1F,EAAMsG,UAAUZ,SAC3FsX,EAAyB5K,YAAmB0K,GAC5CG,EAAyB/K,YAC7B+J,EAAWrM,WAAWsF,sBAAY4H,IAAkBb,EAAWA,GAC/D,GAGIiB,EAAoB/b,uBACxB,SAAC3F,GACCA,EAAE2B,iBACF3B,EAAE4B,kBACF8e,EAAY,CAAClc,MAEf,CAACA,EAAOkc,IAGV,OACE,eAAC,KAAI,CAACnV,GAAIoW,YAAand,GAAQwS,MAAO,CAAE4K,eAAgB,QAAS,SAC/D,gBAAC,KAAG,CAACzB,UAAWC,GAAeyB,aAAcV,EAAkBW,aAAcV,EAAiB,UAC5F,gBAACxC,GAAA,EAAG,CAACE,SAAS,WAAWD,QAAQ,OAAM,UACpC8B,GAAcE,GAAY,eAAC,GAAiB,CAACnf,QAASggB,KACrDX,GACA,eAACnC,GAAA,EAAG,CACFmD,GAAG,MACHljB,IAAK2F,EAAME,cACXsd,IAAKxd,EAAM0H,KACXiU,UAAW8B,mBAAK7B,GAAoBQ,IAAcK,GAAeb,IACjErgB,OAAQ,WACNqB,GAAe,IAEjBtB,QAAS,WACPkhB,GAAoB,IAEtBkB,WAAYpB,EAAc,UAAY,YAGxCA,GAAe,eAAClC,GAAA,EAAG,CAACE,SAAS,WAAWqB,UAAS,UAAKC,GAAkB,YAAIljB,QAC7E6jB,GAAoB,eAAC,GAAkB,OAE1C,gBAAC,KAAM,CAACoB,SAAS,SAASjf,MAAM,OAAOyQ,MAAOiN,EAAY,gBAAkB,cAAc,UACxF,gBAAC,KAAG,CAACuB,SAAS,SAASjf,MAAM,OAAOkf,WAAW,SAAQ,UACrD,eAACxD,GAAA,EAAG,CAACuB,UAAWC,GAAiB,SAAY,QAAZ,EAAE5b,EAAM0H,YAAI,mBAAQ1H,EAAM1D,WAC1D0D,EAAM6d,SAAW,eAAC,KAAU,OAE/B,gBAAC,KAAG,CAACF,SAAS,SAASC,WAAW,SAASrF,IAAI,IAAG,UAChD,eAAC6B,GAAA,EAAG,CAACuB,UAAWC,GAAsB,SAAE5b,EAAMmb,iBAC7Cnb,EAAM8d,sBAAwB,eAAC,MAAY,CAACnC,UAAWC,WAG3DiB,GACC,eAACxB,GAAY,CAACne,QAASggB,EAAmBa,SAAUC,KAAenkB,OAAQoD,KAAMghB,KAAWpkB,OAAO,sBAIlGgjB,GAAoBR,IACrB,gBAAC,KAAM,CAAC6B,WAAW,IAAIC,WAAW,WAAU,UAC1C,gBAAC/D,GAAA,EAAG,CAACuB,UDnJQ,iDCmJsB,UAChCqB,EAAsB,aAGzB,eAAC5C,GAAA,EAAG,CAACuB,UAAWC,GAAsB,SAAEqB,aAgBvCmB,GAAoB,SAAH,GAAyF,IAAD,EAAlFpe,EAAK,EAALA,MAAOic,EAAQ,EAARA,SAAUoC,EAAmB,EAAnBA,oBAAqBtC,EAAG,EAAHA,IAAKM,EAAQ,EAARA,SACvEiC,EAAkBC,KAAUC,KAA2B,QAAvB,EAACxe,EAAM+c,wBAAgB,aAAtB,EAAwBrX,UAAU+Y,GAAGF,KAAUC,KAAKxe,EAAMsG,UAAUZ,WACrGgZ,EAAevd,uBACnB,SAAC3F,GACCA,EAAE2B,iBACF3B,EAAE4B,kBAEFihB,EAAoBre,GADL,KAGjB,CAACA,EAAOqe,IAEJM,EAAaxd,uBACjB,SAAC3F,GACCA,EAAE2B,iBACF3B,EAAE4B,kBAEFihB,EAAoBre,GADL,KAGjB,CAACA,EAAOqe,IAEV,OACE,gBAAC,KAAM,CAAC1C,UDhMmB,kICgMkBiD,eAAgB7C,EAAM,oBAAsB,cAAc,UACrG,gBAAC,KAAG,CAACJ,UDhMiB,iDCgMgB,UACnC2C,EAAkB,eAAC,KAAiB,IAAM,eAAC,KAAmB,IAC/D,eAAClE,GAAA,EAAG,0BAAWkE,EAAkB,YAAc,YAAW,iBAASlM,YACjEpS,EAAMsG,UAAUZ,UACjB,aAEH,eAAC0U,GAAA,EAAG,CAAC5H,MAAO,CAAEqM,WAAY,OAAQC,YAAa,QAAS,SACtD,eAAC,GAAM,CAAC9e,MAAOA,EAAOic,SAAUA,EAAUC,YAAa,aAAiBG,SAAUA,MAEpF,gBAAC,KAAG,CAAC9D,IAAI,IAAIwG,eAAe,gBAAe,UACzC,eAACxD,GAAY,CAACre,QAASwhB,EAAcX,SAAUC,KAAenkB,OAAQoD,KAAMghB,KAAWe,MAAM,oBAG7F,eAACzD,GAAY,CAACre,QAASyhB,EAAYZ,SAAUC,KAAeiB,KAAMhiB,KAAMghB,KAAWe,MAAM,yBAwB3FE,GAA2B,SAAH,OAAMC,EAAM,EAANA,OAAM,OACxC,eAAC,KAAM,CACL9E,QAAQ,OACR7H,MAAO,CACL4M,oBAAoB,UAAD,OAAYD,EAAOtb,OAAM,WAC5CnF,MAAM,GAAD,OARiB,GACC,IAOUygB,EAAOtb,OAAS,GAAyB,OAC1E,SAEDsb,EAAOpc,KAAI,SAAC/C,EAAOqf,GAAK,OACvB,eAACjF,GAAA,EAAG,CAEFmD,GAAG,MACHljB,IAAK2F,EAAME,cACXxB,MAAM,KACNxD,OAAO,KACPokB,YAAY,QACZC,YAAY,MACZC,YAAY,oBACZC,aAAa,IACbjN,MAAO,CAAEkN,OAAQL,GACjB1D,UAAWC,IAAsB,UAVzB5b,EAAMM,QAAO,YAAIN,EAAM1D,gBAgB1BqjB,GAA6B,SAAH,GAOC,IANtCR,EAAM,EAANA,OACAlD,EAAQ,EAARA,SACA2D,EAAsB,EAAtBA,uBACA5X,EAAwB,EAAxBA,yBACAC,EAA2B,EAA3BA,4BACAoU,EAAQ,EAARA,SAEA,EAA6BwD,sBAAW,SAACC,GAAC,OAAMA,KAAG,GAAM,mBAAlDrG,EAAM,KAAEsG,EAAU,KAEzB,EAAgCnlB,mBADb,GACiC,mBAA7ColB,EAAQ,KAAEC,EAAW,KAkB5B,GAhBApjB,qBAAU,WACR,GAAKmjB,EAAL,CAQA,IAAME,EAAaC,aAAY,WAC7BF,EAAYD,EAAW,KACtB,KAEH,OAAO,kBAAMI,cAAcF,IAXpBlY,IACH4X,IACA3X,GAA4B,MAU/B,CAAC+X,EAAUJ,EAAwB5X,EAA0BC,KAE3DkX,GAA4B,IAAlBA,EAAOtb,OAAc,OAAO,KAE3C,IAAMwc,EAAyBlB,EAAOtb,OAAS,EACzCyc,EAAkB7G,IAAW4G,EAEnC,OACE,eAAC,KAAM,CAAC1E,UDnS4B,kICmSiB,SACnD,gBAAC,KAAM,WACL,gBAAC,KAAG,CACFoD,eAAe,gBACflG,aAAcyH,EAAkB,KAAO,IACvCC,OAAQF,EAAyB,UAAY,UAC7CnjB,QAAS,WACHmjB,KACDrY,GAA4BC,GAA4B,GACzD8X,MAEF,UAEF,gBAAC,KAAG,CAACxH,IAAI,KAAKpJ,MAAM,gBAAgBwM,UAAW6E,KAAU,WACrDF,GAAmB,eAAC,GAAwB,CAACnB,OAAQA,EAAOsB,MAAM,EAAG,KAAM,yBAG9EJ,GACC,eAAC,KAAG,CAAClR,MAAM,gBAAe,SAAEsK,EAAS,eAAC,KAAgB,IAAM,eAAC,KAAkB,OAE/EzR,GACA,gBAAC,KAAG,CACFsS,SAAS,WACT5b,MAAM,KACNxD,OAAO,KACPiU,MAAM,cACN4P,eAAe,SACfwB,OAAO,UACPrjB,QAAS0iB,EAAuB,UAEhC,eAAC,GAAW,IACZ,eAAC,KAAc,UAIrB,eAAC,KAAM,CAACrH,IAAI,IAAI/F,MAAO,CAAEqM,WAAY,OAAQC,YAAa,QAAS,SAChEwB,GACCnB,EAAOpc,KAAI,SAAC/C,GAAK,OACf,eAAC,GAAM,CAELA,MAAOA,EACPic,SAAUA,EACVC,YAAa,aACbE,WAAS,EACTC,SAAUA,GALLrc,EAAMmG,e,UCpUdua,GAAa,WACxB,IAAM9M,EAAY9L,cAAO,SAACgY,GAAC,OAAKA,EAAElM,aAC5B7L,EAAeD,cAAO,SAACgY,GAAC,OAAKA,EAAE/X,gBAC/BsW,EAAsBvW,cAAO,SAACgY,GAAC,OAAKA,EAAEzB,uBACtCrW,EAA2BF,cAAO,SAACgY,GAAC,OAAKA,EAAE9X,4BAC3CC,EAA8BH,cAAO,SAACgY,GAAC,OAAKA,EAAE7X,+BAC9CK,EAAsBR,cAAO,SAACgY,GAAC,OAAKA,EAAErd,cACtC2F,EAAgBN,cAAO,SAACgY,GAAC,OAAKA,EAAE1X,iBAChCuY,EAAsB7Y,cAAO,SAACgY,GAAC,OAAKA,EAAEa,uBAEtCtE,EAAWuE,eAEXne,EAAaiG,mBAAQ,WACzB,OAAOC,YAAgCL,KACtC,CAACA,IAEUuY,EAAqBC,oBAAS,CAAC,aAAc,KAAK,kBAAMC,gBAAc,IAA5Ela,KAER,EAAmF6B,mBAAQ,WAYzF,MAAO,CAAEsY,gBAXeve,EACrBC,QAAO,SAACC,GAAI,OAAKA,EAAKC,SAAWC,IAAcoe,cAAgBte,EAAKC,SAAWC,IAAcyB,YAC7FvB,KAAI,SAACJ,GAAI,OAAKA,EAAK3C,SASIkhB,mBARCze,EACxBC,QAAO,SAACC,GAAI,OAAKA,EAAKC,SAAWC,IAAcuB,0BAC/CrB,KAAI,SAACJ,GAAI,OAAKA,EAAK3C,SAMwBmhB,kBALpB1e,EACvBC,QAAO,SAACC,GAAI,OAAKA,EAAKC,SAAWC,IAAcC,eAC/CC,KAAI,SAACJ,GAAI,OAAKA,EAAK3C,SAG2CohB,eAF1C3e,EAAWC,QAAO,SAACC,GAAI,OAAKA,EAAKC,SAAWC,IAAcC,kBAGhF,CAACL,IAbIue,EAAe,EAAfA,gBAAiBE,EAAkB,EAAlBA,mBAAoBC,EAAiB,EAAjBA,kBAAmBC,EAAc,EAAdA,eAoChE,OArBAvkB,qBAAU,WACR,IAAMiH,EAAoBod,EAAmBrd,OAAS,EAChDD,EAAYnB,EAAWoB,OAAS,EAElCC,GACFsS,6BAAmBqC,eAAa4I,oBAAoB,aAClDhJ,UAAWwI,EACXS,aAAc7e,GACX8e,YAA2BL,KAG9BtN,IAAcnP,IAAUC,WAAcZ,GACzBiE,EAAXnE,EAAwBa,IAAUE,eACpBF,IAAUK,eAG1B8O,IAAcnP,IAAUE,gBAAmBf,GAC7CmE,EAAatD,IAAUK,iBAExB,CAAC8O,EAAWnR,EAAYye,EAAoBnZ,EAAc8Y,IAG3D,uCACE,gBAAC,KAAM,CAACxG,QAAS6G,EAAmBrd,OAAS,GAAKsd,EAAkBtd,OAAS,EAAI,OAAS,OAAO,UAC9Fsd,EAAkBtd,OAAS,GAC1B,eAAC,QAAK,CACJ6D,KAAM+Q,eAAa4I,oBACnBhI,WAAU,aACRhB,UAAWwI,EACXS,aAAc7e,EAAWoB,QACtB0d,YAA2BJ,IAEhC7H,qBAAmB,WAEnB,eAAC,GAA0B,CACzB6F,OAAQgC,EACRlF,SAAU4E,EACVjB,uBAAwB,kBAAMxX,EAAcgZ,IAC5CpZ,yBAA0BA,EAC1BC,4BAA6BA,EAC7BoU,SAAUA,MAIf6E,EAAmBne,KAAI,SAAC/C,EAAOqf,GAAK,OACnC,eAAC,GAAiB,CAEhBrf,MAAOA,EACPic,SAAU4E,EACVxC,oBAAqBA,EACrBtC,IAAe,IAAVsD,GAA4C,IAA7B8B,EAAkBtd,OACtCwY,SAAUA,GALLrc,EAAMmG,UASjB,eAAC,KAAM,UACJ6a,EACEP,MAAM,GACNe,UACAze,KAAI,SAAC/C,GAAK,OACT,eAAC,GAAM,CAELA,MAAOA,EACPic,SAAU4E,EACV3E,YAAayE,EACbxE,YAAY,EACZE,SAAUA,GALLrc,EAAMmG,a,UCjGnBsb,GAAc5oB,kBAAO6oB,MAAW,uCAAlB7oB,CAAkB,6GAC3B,YAAQ,SAALG,MAEW,iBAWnB2oB,GAAc9oB,UAAO+X,OAAM,uCAAb/X,CAAa,gNAKtB,YAAQ,SAALG,MAES,cASnB4oB,MAEEC,GAAahpB,UAAOC,IAAG,uCAAVD,CAAU,6LAEP,YAAQ,SAALG,MAED,gBAGb,YAAQ,SAALA,MAEoB,0BAInB,YAAS,SAAN8oB,UACF,YAAS,SAANA,UAGbC,GAAUlpB,UAAOC,IAAG,uCAAVD,CAAU,+HA2BbmpB,GAAY,SAAH,GAAgF,IAA1EC,EAAc,EAAdA,eAAgBC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAa,EAAbA,cACzDN,EAASpZ,mBAAQ,kBATD,SAACuZ,GACvB,IAAMI,EAAqBJ,EAAehc,WAAWpC,OAIrD,MAAM,GAAN,OARkB,GACO,EAOoBwe,EAAkB,MAIlCC,CAAgBL,KAAiB,CAACA,IAE/D,OACE,gBAACF,GAAO,WACN,eAAC,KAAWnJ,cAAa,UAAEwJ,EAAgB,gCAAsB,iCAChEH,EAAiB,GAChB,uCACE,eAACJ,GAAU,CAACC,OAAQA,EAAO,SAAEG,IAC7B,eAACR,GAAW,CAACvkB,QAASilB,EAAU,SAC9B,0CAIN,eAACR,GAAW,CAACzkB,QAASglB,EAAS,SAC7B,eAAC,KAAY,CAAC,cAAY,6B,UC3F5BK,GAAe1pB,kBAAOqX,MAAO,uCAAdrX,CAAc,+BAmCpB2pB,GA9BI,WACjB,IAAMJ,EAAgBK,cAEtB,OACE,gBAACF,GAAY,WACX,eAAC,KAAM,UACJH,EACC,eAAC,KAAY,CAACjT,MAAOuT,KAAU1kB,OAAO2kB,eAEtC,eAAC,KAAO,CAACxT,MAAOuT,KAAU1kB,OAAO2kB,aAAcznB,OAAO,OAAOwD,MAAM,OAAO6b,YAAY,UAGzF6H,EACC,eAAC,KAAM,CAAC,cAAY,uBAAuBzG,UAAWiH,KAAQ,8BAI9D,gBAAC,KAAM,CAACrK,IAAI,KAAI,UACd,eAAC,KAAM,CAAC,cAAY,gBAAgBoD,UAAWiH,KAASpQ,MAAO,CAAEhB,WAAY,QAAS,+BAGtF,eAAC,KAAM,CAACD,SAAS,KAAKS,WAAW,SAAS7C,MAAM,gBAAgBqD,MAAO,CAAEhB,WAAY,QAAS,mDCczFqR,GApCS,SAAH,GAA2C,IAArC7iB,EAAK,EAALA,MACnBkc,EAAc4G,cAAa,SAACra,GAAK,OAAKA,EAAMsa,mBAC5C1G,EAAWuE,eACjB,EAA8BhmB,oBAAS,GAAM,mBAAtCooB,EAAO,KAAEC,EAAU,KACpBC,EAAc,WAAH,OAASD,GAAYD,IAEhCG,EAA0D,SAAC3nB,GAC/DA,EAAE2B,iBACF3B,EAAE4B,kBACF8e,EAAYlc,IAGd,OACE,gBAAC,KAAG,CAAC2b,UAAWC,GAAeyB,aAAc6F,EAAa5F,aAAc4F,EAAY,UAClF,gBAAC9I,GAAA,EAAG,CAACE,SAAS,WAAWD,QAAQ,OAAM,UACpCgC,GAAY,eAAC,GAAiB,CAACnf,QAASimB,IACzC,sBAAK9oB,IAAK2F,EAAME,cAAesd,IAAKxd,EAAM0H,KAAMiU,UAAWC,QAE7D,gBAAC,KAAM,CAAC+B,SAAS,SAASjf,MAAM,OAAOyQ,MAAM,cAAa,UACxD,eAAC,KAAG,CAACwO,SAAS,SAASjf,MAAM,OAAOqgB,eAAe,gBAAgBnB,WAAW,SAASrF,IAAI,KAAI,SAC7F,eAAC6B,GAAA,EAAG,CAACuB,UAAWC,GAAiB,SAAE5b,EAAM0H,MAAI,WAAQ1H,EAAM1D,aAE7D,gBAAC,KAAG,CAACqhB,SAAS,SAASC,WAAW,SAASrF,IAAI,IAAG,UAChD,eAAC6B,GAAA,EAAG,CAACuB,UAAWC,GAAsB,SAAE5b,EAAMO,eAAemH,OAC5D1H,EAAM8d,sBAAwB,eAAC,MAAY,CAACnC,UAAWC,WAG3DoH,IAAY3G,GACX,eAAChB,GAAY,CAACne,QAASimB,EAAmBpF,SAAUC,KAAenkB,OAAQoD,KAAMghB,KAAWpkB,OAAO,wBClC9FupB,GAAoB,WAC/B,IAAMC,EAAaP,cAAa,SAACra,GAAK,OAAKA,EAAM4a,cACjD,OACE,eAAC,KAAM,UACJA,EAAWxf,OAASwf,EAAWtgB,KAAI,SAAC/C,EAAOqf,GAAK,OAAK,eAAC,GAAe,CAACrf,MAAOA,GAAYqf,MAAa,QCchGiE,GAAY,IACZC,GAAiB,IAOxBC,GAAe3qB,UAAOC,IAAG,wCAAVD,CAAU,uWAMpByqB,IAEK,YAAQ,SAALtqB,MAEU,qBACP,YAAQ,SAALA,MAEI,qBAEb,YAAQ,SAALA,MAEM,iBACZ,gBAAGyqB,EAAW,EAAXA,YAAarB,EAAa,EAAbA,cAAa,OACtCqB,EAAerB,EAAgBsB,KAAQC,iBAAmBD,KAAQE,cAAgB,EAAK,KAEpD,gBAAG5qB,EAAK,EAALA,MAAK,gBAEzCA,EAAM6qB,WAAWhoB,GAAE,SASc,gBAAG7C,EAAK,EAALA,MAAK,gBAEzCA,EAAM6qB,WAAWC,KAAI,QACdP,IAIPQ,GAAwBlrB,UAAOC,IAAG,wCAAVD,CAAU,+EAQlCmrB,GAAiBnrB,UAAOC,IAAG,wCAAVD,CAAU,6MACjB,YAAQ,SAALG,MAEK,gBACb,YAAQ,SAALA,MAEoB,0BASlB,YAAQ,SAALA,MAEPW,WAAWC,SAAe,UAGvB,YAAQ,SAALZ,MAENC,QAAa,SAInBgrB,GAAqB,SAAH,OAAMlI,EAAG,EAAHA,IAAKmI,EAAI,EAAJA,KAAI,OACrC,eAAC9J,GAAA,EAAG,CACF+J,QAAQ,KACR5E,YAAY,MACZD,YAAY,QACZE,YAAY,cACZZ,eAAgB7C,EAAM,cAAgB,oBACtCqI,kBAAmBrI,EAAM,oBAAsB,cAC/C9iB,QAASirB,EAAO,IAAM,IACtBvqB,WAAW,SAqHA0qB,UAjHH,WACV,MAAwCvB,cACtC,YAAoB,MAAQ,CAC1BwB,gBADM,EAALlb,MAEDia,WAFkB,EAAVA,cAIVhb,WALMic,EAAe,EAAfA,gBAAiBjB,EAAU,EAAVA,WAQjBkB,EAAwBC,cAAoB,YAAsB,MAAQ,CAAED,oBAAV,EAAnBA,wBAA/CA,oBAER,EAAkFzc,cAChF,SAACW,GAAK,kCAAWA,GAAK,IAAEF,YAAaE,EAAMP,SAAUI,oBAAqBG,EAAMhG,eAChF4F,WAFMuL,EAAS,EAATA,UAAWrL,EAAW,EAAXA,YAAaa,EAAK,EAALA,MAAOM,EAAW,EAAXA,YAAa+a,EAAS,EAATA,UAAWtb,EAAc,EAAdA,eAIvDb,EAAwBR,cAAO,YAAa,MAAQ,CAAEQ,oBAAV,EAAV7F,eAAlC6F,oBAEF8Z,EAAgBK,cAChBiC,EAAgBC,cAChBC,EAAYC,cACZxI,EAAWuE,eAEXne,EAAaiG,mBAAQ,kBAAMC,YAAgCL,KAAsB,CAACA,IAExF,EAAsC1N,oBAAS,GAAM,mBAA9CkqB,EAAW,KAAE/R,EAAc,KAClC,EAA0CnY,oBAAS,GAAM,mBAAlDmqB,EAAa,KAAEC,EAAgB,KACtC,EAA4CpqB,mBAAS,GAAE,mBAAhDqqB,EAAc,KAAEC,EAAiB,KAQlCC,EAAiBhkB,uBAAY,WACjCgI,EAAe,CAAEO,aAAa,EAAO0b,aAAa,MACjD,CAACjc,IAEJtM,qBAAU,WACJ0L,IAAgBuc,GAAa/R,GAAe,KAC/C,CAACxK,EAAauc,IAEjB,IAAMO,EAAkB5iB,EAAWoB,OAAS,EAUtCyhB,EAAiB7iB,EAAWoB,OAAS,EACrC0hB,EAAkBlC,EAAWxf,OAAS,EAEtC2hB,EAAyBnS,SAC3B+O,IAAkBkD,GAAkB1R,IAAcnP,IAAUK,eAAmBsd,IAAkBmD,GAG/FvS,EAAkBtK,mBACtB,iCACK6Y,YAA2B9e,EAAWM,KAAI,SAACJ,GAAI,OAAKA,EAAK3C,aAE9D,CAACyC,IAGH,OAAKiH,GAAgBkb,EAKnB,gBAACa,GAAA,EAAM,WACL,gBAACjC,GAAY,CAAC,cAAY,UAAUC,YAAapH,GAAYyI,EAAa1C,cAAeA,EAAc,UACrG,eAAC,GAAS,CACRH,eAAgBG,EAAgBiB,EAAWxf,OAASpB,EAAWoB,OAC/Dqe,SAAUiD,EACVhD,UAAWC,EAAgBkC,EAAkBlb,EAC7CgZ,cAAeA,IAEhBoD,GAA0B,eAAC,GAAU,IACtC,eAAC,GAAkB,CAACzJ,KAAG,EAACmI,KAAMa,GAAiBE,EAAiB,IAChE,eAAC,KAAM,CAAC3nB,IAtDI,SAACooB,GACjB,GAAa,OAATA,EAAe,CACjB,IAAMC,EAAYD,EAAKE,aAAeF,EAAK5jB,aAC3C6jB,IAAcZ,GAAiBC,EAAiBW,KAmDtBhK,UCpMH,oDDoMsCkK,SArC3C,SAACC,GACrB,IAAMC,EAAYD,EAAMjkB,cAAckkB,UAChCC,EAAkBF,EAAMjkB,cAAcC,aACtC8jB,EAAeE,EAAMjkB,cAAc+jB,aAEzCV,EAAkBa,GAAcA,EAAYC,GAAmBJ,EAAgB,IAAM,IAgCGrN,IAAI,KAAI,SACzF6J,EAAgB,eAAC,GAAiB,IAAM,eAAC,GAAU,MAErDiD,IAAoBjD,GACnB,eAAC,GAAS,CAACrP,eAAgBA,EAAgBC,gBAAiBA,IAE7DuS,GAAmBnD,GAClB,eAAC4B,GAAc,CACb9mB,QAAS,WACPunB,IACAF,EAAoB0B,IAAqBC,SACzC9P,6BAAmBqC,eAAa0N,4BAA6B,CAC3DC,cAAe/C,EAAWxf,OAC1BwiB,qBAAsBhD,EAAWtgB,KAAI,SAAC/C,GAAK,OAAKA,EAAMO,eAAeD,WACrEgmB,UAAWjD,EAAWtgB,KAAI,SAAC/C,GAAK,OAAKA,EAAM1D,cAE7C,SAEF,yCAKLooB,EACC,eAACX,GAAqB,CAAC7mB,QAASunB,IAEhCK,GAAe,eAACyB,GAAA,EAAO,CAACrpB,QAAS,kBAAQqL,OAAsClL,EAAxB0V,GAAe,SAxCnE,O,kCExLX,2IAUO,SAASO,IACd,IAAM7Q,EAAaqF,aAAO,SAACW,GAAK,OAAKA,EAAMhG,cAE3C,OAAOiG,mBAAQ,WAab,OAZsBjG,EAAW+jB,QAC/B,SAACC,EAAO9jB,GAAI,OACVA,EAAKC,SAAWC,IAAcC,YAC1B2jB,EAAMC,IACJnI,IAAUC,KACR7b,EAAK3C,MAAM+c,iBAAmBpa,EAAK3C,MAAM+c,iBAAiBrX,SAAW/C,EAAK3C,MAAMsG,UAAUZ,WAG9F+gB,IACNlI,IAAUC,KAAK,MAIhB,CAAC/b,IAGC,SAASkkB,IACd,IAAMhV,EAAgB2B,IAChBE,EAAkBC,YAAY,OAE9BuB,EAAqBtM,mBAAQ,WACjC,OAAOuM,YAAuBC,sBAAYvD,EAAc1L,YAA4B,OAAfuN,QAAe,IAAfA,SAAmBnW,KACvF,CAACmW,EAAiB7B,IAEfY,EAAYuE,YAAmB9B,GAErC,OAAOtM,mBAAQ,WACb,OAAgB,OAAT6J,QAAS,IAATA,OAAS,EAATA,EAAWJ,YACjB,CAACI,M","file":"static/js/1.4ea8ca95.chunk.js","sourcesContent":["import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var loadingBlock = '_2kdvfw1';\nexport var loadingAsset = '_2kdvfw3 _2kdvfw1 rgw6ez7zp rgw6ez7y1 rgw6ez54p';","import { Trans } from '@lingui/macro'\r\nimport Row from 'components/Row'\r\nimport { getHeightFromAspectRatio, getMediaAspectRatio, handleUniformAspectRatio } from 'nft/components/card/utils'\r\nimport { UniformAspectRatio, UniformAspectRatios } from 'nft/types'\r\nimport { ReactNode, useEffect, useRef, useState } from 'react'\r\nimport { Pause, Play } from 'react-feather'\r\nimport styled from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\nimport { colors } from 'theme/colors'\r\n\r\nconst StyledImageContainer = styled.div<{ isDisabled?: boolean }>`\r\n  position: relative;\r\n  pointer-events: auto;\r\n  &:hover {\r\n    opacity: ${({ isDisabled, theme }) => (isDisabled ? \r\n      //@ts-ignore\r\n      theme.opacity.disabled : theme.opacity.enabled)};\r\n  }\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'default' : 'pointer')};\r\n`\r\n\r\nexport const MediaContainer = ({ isDisabled, children }: { isDisabled: boolean; children: ReactNode }) => {\r\n  return <StyledImageContainer isDisabled={isDisabled}>{children}</StyledImageContainer>\r\n}\r\n\r\ninterface ImageProps {\r\n  src?: string\r\n  uniformAspectRatio?: UniformAspectRatio\r\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\r\n  renderedHeight?: number\r\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\r\n}\r\n\r\nconst StyledMediaContainer = styled(Row)`\r\n  overflow: hidden;\r\n  border-top-left-radius: 12px;\r\n  border-top-right-radius: 12px;\r\n`\r\n\r\nexport const StyledImage = styled.img<{\r\n  imageLoading: boolean\r\n  $aspectRatio?: string\r\n  $hidden?: boolean\r\n}>`\r\n  width: 100%;\r\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\r\n  transition: ${({ theme }) => `${\r\n      //@ts-ignore\r\n      theme.transition.duration.medium} ${theme.transition.timing.ease} transform`};\r\n  will-change: transform;\r\n  object-fit: contain;\r\n  visibility: ${({ $hidden }) => ($hidden ? 'hidden' : 'visible')};\r\n  background: ${({ theme, imageLoading }) =>\r\n    imageLoading && `linear-gradient(270deg, ${\r\n      //@ts-ignore\r\n      theme.backgroundOutline} 0%, ${theme.backgroundSurface} 100%)`};\r\n`\r\n\r\nexport const NftImage = ({\r\n  src,\r\n  uniformAspectRatio = UniformAspectRatios.square,\r\n  setUniformAspectRatio,\r\n  renderedHeight,\r\n  setRenderedHeight,\r\n}: ImageProps) => {\r\n  const [noContent, setNoContent] = useState(!src)\r\n  const [loaded, setLoaded] = useState(false)\r\n\r\n  if (noContent) {\r\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\r\n  }\r\n\r\n  return (\r\n    <StyledMediaContainer>\r\n      <StyledImage\r\n        src={src}\r\n        $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\r\n        imageLoading={!loaded}\r\n        draggable={false}\r\n        onError={() => setNoContent(true)}\r\n        onLoad={(e) => {\r\n          handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\r\n          setLoaded(true)\r\n        }}\r\n      />\r\n    </StyledMediaContainer>\r\n  )\r\n}\r\n\r\ninterface MediaProps {\r\n  isAudio?: boolean\r\n  mediaSrc?: string\r\n  tokenId?: string\r\n  shouldPlay: boolean\r\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\r\n}\r\n\r\nconst PlaybackButton = styled.div<{ pauseButton?: boolean }>`\r\n  display: ${({ pauseButton }) => (pauseButton ? 'block' : 'none')};\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentAction};\r\n  position: absolute;\r\n  height: 40px;\r\n  width: 40px;\r\n  z-index: 1;\r\n  margin-left: calc(100% - 50px);\r\n  transform: translateY(-76px);\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: block;\r\n  }\r\n\r\n  ${StyledImageContainer}:hover & {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst StyledVideo = styled.video<{\r\n  $aspectRatio?: string\r\n}>`\r\n  width: 100%;\r\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\r\n`\r\n\r\nconst StyledInnerMediaContainer = styled(Row)`\r\n  position: absolute;\r\n  left: 0px;\r\n  top: 0px;\r\n`\r\n\r\nconst StyledAudio = styled.audio`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nexport const NftPlayableMedia = ({\r\n  isAudio,\r\n  src,\r\n  mediaSrc,\r\n  tokenId,\r\n  uniformAspectRatio = UniformAspectRatios.square,\r\n  setUniformAspectRatio,\r\n  renderedHeight,\r\n  setRenderedHeight,\r\n  shouldPlay,\r\n  setCurrentTokenPlayingMedia,\r\n}: MediaProps & ImageProps) => {\r\n  const mediaRef = useRef<HTMLVideoElement>(null)\r\n  const [noContent, setNoContent] = useState(!src)\r\n  const [imageLoaded, setImageLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (shouldPlay && mediaRef.current) {\r\n      mediaRef.current.play()\r\n    } else if (!shouldPlay && mediaRef.current) {\r\n      mediaRef.current.pause()\r\n    }\r\n  }, [shouldPlay])\r\n\r\n  if (noContent) {\r\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledMediaContainer>\r\n        <StyledImage\r\n          src={src}\r\n          $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\r\n          imageLoading={!imageLoaded}\r\n          draggable={false}\r\n          onError={() => setNoContent(true)}\r\n          onLoad={(e) => {\r\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\r\n            setImageLoaded(true)\r\n          }}\r\n          $hidden={shouldPlay && !isAudio}\r\n        />\r\n      </StyledMediaContainer>\r\n      {shouldPlay ? (\r\n        <>\r\n          <PlaybackButton pauseButton={true}>\r\n            <Pause\r\n              size=\"24px\"\r\n              onClick={(e) => {\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n                setCurrentTokenPlayingMedia(undefined)\r\n              }}\r\n            />\r\n          </PlaybackButton>\r\n          <StyledInnerMediaContainer>\r\n            {isAudio ? (\r\n              <StyledAudio\r\n                ref={mediaRef}\r\n                onEnded={(e) => {\r\n                  e.preventDefault()\r\n                  setCurrentTokenPlayingMedia(undefined)\r\n                }}\r\n              >\r\n                <source src={mediaSrc} />\r\n              </StyledAudio>\r\n            ) : (\r\n              <StyledVideo\r\n                $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\r\n                ref={mediaRef}\r\n                onEnded={(e) => {\r\n                  e.preventDefault()\r\n                  setCurrentTokenPlayingMedia(undefined)\r\n                }}\r\n                loop\r\n                playsInline\r\n              >\r\n                <source src={mediaSrc} />\r\n              </StyledVideo>\r\n            )}\r\n          </StyledInnerMediaContainer>\r\n        </>\r\n      ) : (\r\n        <PlaybackButton>\r\n          <Play\r\n            size=\"24px\"\r\n            onClick={(e) => {\r\n              e.preventDefault()\r\n              e.stopPropagation()\r\n              setCurrentTokenPlayingMedia(tokenId)\r\n            }}\r\n          />\r\n        </PlaybackButton>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst NoContentContainerBackground = styled.div<{ $height?: number }>`\r\n  position: relative;\r\n  width: 100%;\r\n  height: ${({ $height }) => ($height ? `${$height}px` : 'auto')};\r\n  padding-top: 100%;\r\n  background: ${({ theme }) =>\r\n    `linear-gradient(90deg, ${\r\n      //@ts-ignore\r\n      theme.backgroundSurface} 0%, ${theme.backgroundInteractive} 95.83%)`};\r\n`\r\n\r\nconst NoContentText = styled(ThemedText.BodyPrimary)`\r\n  position: absolute;\r\n  text-align: center;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate3d(-50%, -50%, 0);\r\n  color: ${colors.gray500};\r\n`\r\n\r\nconst NoContentContainer = ({ height }: { height?: number }) => (\r\n  <>\r\n    <NoContentContainerBackground $height={height}>\r\n      <NoContentText>\r\n        <Trans>Content not</Trans>\r\n        <br />\r\n        <Trans>available yet</Trans>\r\n      </NoContentText>\r\n    </NoContentContainerBackground>\r\n  </>\r\n)\r\n","import { Trans } from '@lingui/macro'\r\nimport Row from 'components/Row'\r\nimport { MouseoverTooltip } from 'components/Tooltip'\r\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { getMarketplaceIcon } from 'nft/components/card/utils'\r\nimport { CollectionSelectedAssetIcon } from 'nft/components/icons'\r\nimport { Markets } from 'nft/types'\r\nimport { putCommas } from 'nft/utils'\r\nimport { AlertTriangle, Check, Tag } from 'react-feather'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\n\r\nconst StyledMarketplaceContainer = styled.div<{ isText?: boolean }>`\r\n  position: absolute;\r\n  display: flex;\r\n  top: 12px;\r\n  left: 12px;\r\n  height: 32px;\r\n  width: ${({ isText }) => (isText ? 'auto' : '32px')};\r\n  padding: ${({ isText }) => (isText ? '0px 8px' : '0px')};\r\n  background: rgba(93, 103, 133, 0.24);\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentTextLightPrimary};\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 32px;\r\n  z-index: 2;\r\n`\r\n\r\nconst ListPriceRowContainer = styled(Row)`\r\n  gap: 6px;\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentTextLightPrimary};\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  line-height: 16px;\r\n  text-shadow: 1px 1px 3px rgba(51, 53, 72, 0.54);\r\n`\r\n\r\nexport const MarketplaceContainer = ({\r\n  isSelected,\r\n  marketplace,\r\n  tokenType,\r\n  listedPrice,\r\n}: {\r\n  isSelected: boolean\r\n  marketplace?: Markets\r\n  tokenType?: NftStandard\r\n  listedPrice?: string\r\n}) => {\r\n  if (isSelected) {\r\n    if (!marketplace) {\r\n      return (\r\n        <StyledMarketplaceContainer>\r\n          <Check size={20} />\r\n        </StyledMarketplaceContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledMarketplaceContainer>\r\n        <CollectionSelectedAssetIcon width=\"20px\" height=\"20px\" viewBox=\"0 0 20 20\" />\r\n      </StyledMarketplaceContainer>\r\n    )\r\n  }\r\n\r\n  if (listedPrice) {\r\n    return (\r\n      <StyledMarketplaceContainer isText={true}>\r\n        <ListPriceRowContainer>\r\n          <Tag size={20} />\r\n          {listedPrice} ETH\r\n        </ListPriceRowContainer>\r\n      </StyledMarketplaceContainer>\r\n    )\r\n  }\r\n\r\n  if (!marketplace || tokenType === NftStandard.Erc1155) {\r\n    return null\r\n  }\r\n\r\n  return <StyledMarketplaceContainer>{getMarketplaceIcon(marketplace)}</StyledMarketplaceContainer>\r\n}\r\n\r\nconst SuspiciousIcon = styled(AlertTriangle)`\r\n  width: 16px;\r\n  height: 16px;\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentFailure};\r\n`\r\n\r\ninterface RankingProps {\r\n  provider: { url?: string; rank?: number }\r\n}\r\n\r\nconst RarityLogoContainer = styled(Row)`\r\n  margin-right: 8px;\r\n  width: 16px;\r\n`\r\n\r\nconst RarityText = styled(ThemedText.BodySmall)`\r\n  display: flex;\r\n`\r\n\r\nconst RarityInfo = styled(ThemedText.Caption)`\r\n  flex-shrink: 0;\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.textSecondary};\r\n  background: ${({ theme }) =>\r\n      //@ts-ignore\r\n      theme.backgroundInteractive};\r\n  padding: 4px 6px;\r\n  border-radius: 4px;\r\n  font-weight: 700 !important;\r\n  line-height: 12px;\r\n  text-align: right;\r\n  cursor: pointer;\r\n`\r\n\r\nexport const Ranking = ({ provider }: RankingProps) => {\r\n  if (!provider.rank) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <RarityInfo>\r\n      <MouseoverTooltip\r\n        text={\r\n          <Row>\r\n            <RarityLogoContainer>\r\n              <img src=\"/nft/svgs/gem.svg\" width={16} height={16} />\r\n            </RarityLogoContainer>\r\n            <RarityText>Ranking by Rarity Sniper</RarityText>\r\n          </Row>\r\n        }\r\n        placement=\"top\"\r\n      >\r\n        # {putCommas(provider.rank)}\r\n      </MouseoverTooltip>\r\n    </RarityInfo>\r\n  )\r\n}\r\n\r\nconst SuspiciousIconContainer = styled(Row)`\r\n  flex-shrink: 0;\r\n`\r\n\r\nexport const Suspicious = () => {\r\n  return (\r\n    <MouseoverTooltip\r\n      text={\r\n        <ThemedText.BodySmall>\r\n          <Trans>Blocked on OpenSea</Trans>\r\n        </ThemedText.BodySmall>\r\n      }\r\n      placement=\"top\"\r\n    >\r\n      <SuspiciousIconContainer>\r\n        <SuspiciousIcon />\r\n      </SuspiciousIconContainer>\r\n    </MouseoverTooltip>\r\n  )\r\n}\r\n","import { NftImage, NftPlayableMedia } from 'nft/components/card/media'\r\nimport {\r\n  LarvaLabsMarketplaceIcon,\r\n  LooksRareIcon,\r\n  Nft20Icon,\r\n  NftXIcon,\r\n  OpenSeaMarketplaceIcon,\r\n  SudoSwapIcon,\r\n  X2y2Icon,\r\n} from 'nft/components/icons'\r\nimport { GenieAsset, Markets, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\r\nimport { isAudio, isVideo } from 'nft/utils'\r\nimport { ReactNode, useCallback } from 'react'\r\n\r\nenum AssetMediaType {\r\n  Image,\r\n  Video,\r\n  Audio,\r\n}\r\n\r\nfunction getAssetImageUrl(asset: GenieAsset | WalletAsset) {\r\n  return asset.imageUrl || asset.smallImageUrl\r\n}\r\n\r\nfunction getAssetMediaUrl(asset: GenieAsset | WalletAsset) {\r\n  return asset.animationUrl\r\n}\r\n\r\nexport function detailsHref(asset: GenieAsset | WalletAsset) {\r\n  if ('address' in asset) return `/nfts/asset/${asset.address}/${asset.tokenId}?origin=collection`\r\n  if ('asset_contract' in asset) return `/nfts/asset/${asset.asset_contract.address}/${asset.tokenId}?origin=profile`\r\n  return '/nfts/profile'\r\n}\r\n\r\nfunction getAssetMediaType(asset: GenieAsset | WalletAsset) {\r\n  let assetMediaType = AssetMediaType.Image\r\n  if (asset.animationUrl) {\r\n    if (isAudio(asset.animationUrl)) {\r\n      assetMediaType = AssetMediaType.Audio\r\n    } else if (isVideo(asset.animationUrl)) {\r\n      assetMediaType = AssetMediaType.Video\r\n    }\r\n  }\r\n  return assetMediaType\r\n}\r\n\r\nexport function getNftDisplayComponent(\r\n  asset: GenieAsset | WalletAsset,\r\n  mediaShouldBePlaying: boolean,\r\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void,\r\n  uniformAspectRatio?: UniformAspectRatio,\r\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\r\n  renderedHeight?: number,\r\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\r\n) {\r\n  switch (getAssetMediaType(asset)) {\r\n    case AssetMediaType.Image:\r\n      return (\r\n        <NftImage\r\n          src={getAssetImageUrl(asset)}\r\n          uniformAspectRatio={uniformAspectRatio}\r\n          setUniformAspectRatio={setUniformAspectRatio}\r\n          renderedHeight={renderedHeight}\r\n          setRenderedHeight={setRenderedHeight}\r\n        />\r\n      )\r\n    case AssetMediaType.Video:\r\n      return (\r\n        <NftPlayableMedia\r\n          src={getAssetImageUrl(asset)}\r\n          mediaSrc={getAssetMediaUrl(asset)}\r\n          tokenId={asset.tokenId}\r\n          shouldPlay={mediaShouldBePlaying}\r\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\r\n          uniformAspectRatio={uniformAspectRatio}\r\n          setUniformAspectRatio={setUniformAspectRatio}\r\n          renderedHeight={renderedHeight}\r\n          setRenderedHeight={setRenderedHeight}\r\n        />\r\n      )\r\n    case AssetMediaType.Audio:\r\n      return (\r\n        <NftPlayableMedia\r\n          isAudio={true}\r\n          src={getAssetImageUrl(asset)}\r\n          mediaSrc={getAssetMediaUrl(asset)}\r\n          tokenId={asset.tokenId}\r\n          shouldPlay={mediaShouldBePlaying}\r\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\r\n          uniformAspectRatio={uniformAspectRatio}\r\n          setUniformAspectRatio={setUniformAspectRatio}\r\n          renderedHeight={renderedHeight}\r\n          setRenderedHeight={setRenderedHeight}\r\n        />\r\n      )\r\n  }\r\n}\r\n\r\nexport function useSelectAsset(\r\n  selectAsset: () => void,\r\n  unselectAsset: () => void,\r\n  isSelected: boolean,\r\n  isDisabled: boolean,\r\n  onClick?: () => void\r\n) {\r\n  return useCallback(\r\n    (e: React.MouseEvent) => {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n\r\n      if (isDisabled) {\r\n        return\r\n      }\r\n\r\n      if (onClick) {\r\n        onClick()\r\n        return\r\n      }\r\n\r\n      return isSelected ? unselectAsset() : selectAsset()\r\n    },\r\n    [selectAsset, isDisabled, onClick, unselectAsset, isSelected]\r\n  )\r\n}\r\n\r\nexport function getMarketplaceIcon(market: Markets): ReactNode {\r\n  switch (market) {\r\n    case Markets.Opensea:\r\n      return <OpenSeaMarketplaceIcon />\r\n    case Markets.LooksRare:\r\n      return <LooksRareIcon />\r\n    case Markets.X2Y2:\r\n      return <X2y2Icon />\r\n    case Markets.Sudoswap:\r\n      return <SudoSwapIcon />\r\n    case Markets.NFT20:\r\n      return <Nft20Icon />\r\n    case Markets.NFTX:\r\n      return <NftXIcon />\r\n    case Markets.Cryptopunks:\r\n      return <LarvaLabsMarketplaceIcon />\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport const handleUniformAspectRatio = (\r\n  uniformAspectRatio: UniformAspectRatio,\r\n  e: React.SyntheticEvent<HTMLElement, Event>,\r\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\r\n  renderedHeight?: number,\r\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\r\n) => {\r\n  if (uniformAspectRatio !== UniformAspectRatios.square && setUniformAspectRatio) {\r\n    const height = e.currentTarget.clientHeight\r\n    const width = e.currentTarget.clientWidth\r\n    const aspectRatio = width / height\r\n\r\n    if (\r\n      (!renderedHeight || renderedHeight !== height) &&\r\n      aspectRatio < 1 &&\r\n      uniformAspectRatio !== UniformAspectRatios.square &&\r\n      setRenderedHeight\r\n    ) {\r\n      setRenderedHeight(height)\r\n    }\r\n\r\n    const variance = 0.05\r\n    if (uniformAspectRatio === UniformAspectRatios.unset) {\r\n      setUniformAspectRatio(aspectRatio >= 1 ? UniformAspectRatios.square : aspectRatio)\r\n    } else if (aspectRatio > uniformAspectRatio + variance || aspectRatio < uniformAspectRatio - variance) {\r\n      setUniformAspectRatio(UniformAspectRatios.square)\r\n      setRenderedHeight && setRenderedHeight(undefined)\r\n    }\r\n  }\r\n}\r\n\r\nexport function getHeightFromAspectRatio(\r\n  uniformAspectRatio: UniformAspectRatio,\r\n  renderedHeight?: number\r\n): number | undefined {\r\n  return uniformAspectRatio === UniformAspectRatios.square || uniformAspectRatio === UniformAspectRatios.unset\r\n    ? undefined\r\n    : renderedHeight\r\n}\r\n\r\nexport function getMediaAspectRatio(\r\n  uniformAspectRatio?: UniformAspectRatio,\r\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\r\n): string {\r\n  return uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\r\n}\r\n","import { BaseVariant, FeatureFlag, useBaseFlag } from '../index'\r\n\r\nexport function usePayWithAnyTokenFlag(): BaseVariant {\r\n  return useBaseFlag(FeatureFlag.payWithAnyToken, BaseVariant.Enabled)\r\n}\r\n\r\nexport function usePayWithAnyTokenEnabled(): boolean {\r\n  return usePayWithAnyTokenFlag() === BaseVariant.Enabled\r\n}\r\n\r\nexport { BaseVariant as PayWithAnyTokenVariant }\r\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\r\n\r\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\r\nimport { filterUpdatedAssetsByState } from './updatedAssets'\r\n\r\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\r\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\r\n}\r\n\r\nfunction createBagFromUpdatedAssets(\r\n  unavailable: UpdatedGenieAsset[],\r\n  priceChanged: UpdatedGenieAsset[],\r\n  unchanged: UpdatedGenieAsset[]\r\n): BagItem[] {\r\n  return [\r\n    ...unavailable.map((unavailableAsset) => ({\r\n      asset: unavailableAsset,\r\n      status: BagItemStatus.UNAVAILABLE,\r\n    })),\r\n    ...priceChanged.map((changedAsset) => ({\r\n      asset: changedAsset,\r\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\r\n    })),\r\n    ...unchanged.map((unchangedAsset) => ({\r\n      asset: unchangedAsset,\r\n      status: BagItemStatus.REVIEWED,\r\n    })),\r\n  ]\r\n}\r\n\r\nfunction evaluateNextBagState(\r\n  hasAssets: boolean,\r\n  shouldReview: boolean,\r\n  hasAssetsInReview: boolean,\r\n  shouldRefetchCalldata: boolean\r\n): BagStatus {\r\n  if (!hasAssets) {\r\n    return BagStatus.ADDING_TO_BAG\r\n  }\r\n\r\n  if (shouldReview) {\r\n    if (hasAssetsInReview) {\r\n      return BagStatus.IN_REVIEW\r\n    }\r\n\r\n    return BagStatus.CONFIRM_REVIEW\r\n  }\r\n\r\n  if (shouldRefetchCalldata) {\r\n    return BagStatus.CONFIRM_QUOTE\r\n  }\r\n\r\n  return BagStatus.CONFIRMING_IN_WALLET\r\n}\r\n\r\nexport function getNextBagState(\r\n  wishAssetsToBuy: UpdatedGenieAsset[],\r\n  route: RoutingItem[],\r\n  purchasingWithErc20: boolean\r\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\r\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\r\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\r\n\r\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\r\n\r\n  const hasAssets = updatedAssets.length > 0\r\n  const hasAssetsInReview = priceChanged.length > 0\r\n  const hasUnavailableAssets = unavailable.length > 0\r\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\r\n\r\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\r\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\r\n\r\n  return { newBagItems, nextBagStatus }\r\n}\r\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\r\n\r\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\r\n  return {\r\n    action: RoutingActions.Buy,\r\n    marketplace: routingItem.marketplace.toLowerCase(),\r\n    amountIn: routingItem.price.value,\r\n    assetIn: {\r\n      ETHPrice: routingItem.price.value,\r\n      baseAsset: routingItem.price.currency,\r\n      basePrice: routingItem.price.value,\r\n      baseDecimals: '18',\r\n    },\r\n    amountOut: routingItem.amount.toString(),\r\n    assetOut: {\r\n      id: routingItem.id,\r\n      decimals: 18,\r\n      address: routingItem.contractAddress,\r\n      priceInfo: {\r\n        ETHPrice: routingItem.price.value,\r\n        baseAsset: routingItem.price.currency,\r\n        basePrice: routingItem.price.value,\r\n        baseDecimals: '18',\r\n      },\r\n      tokenType: routingItem.tokenType as unknown as TokenType,\r\n      tokenId: routingItem.tokenId,\r\n      amount: routingItem.amount.toString(),\r\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\r\n      orderSource: 'api',\r\n    },\r\n  }\r\n}\r\n\r\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\r\n  return routingItems.map(buildRoutingItem)\r\n}\r\n\r\nexport function buildRouteResponse(\r\n  routeResponse: NftRouteResponse,\r\n  useErc20Token: boolean\r\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\r\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\r\n  return {\r\n    route,\r\n    routeResponse: {\r\n      route,\r\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\r\n      data: routeResponse.calldata,\r\n      to: routeResponse.toAddress,\r\n    },\r\n  }\r\n}\r\n","import { Currency } from '@uniswap/sdk-core'\r\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\r\nimport create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\ninterface TokenInputState {\r\n  inputCurrency: Currency | undefined\r\n  setInputCurrency: (currency: Currency | undefined) => void\r\n  clearInputCurrency: () => void\r\n  tokenTradeInput: TokenTradeInput | undefined\r\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\r\n}\r\n\r\nexport const useTokenInput = create<TokenInputState>()(\r\n  devtools(\r\n    (set) => ({\r\n      inputCurrency: undefined,\r\n      tokenTradeInput: undefined,\r\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\r\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\r\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\r\n    }),\r\n    { name: 'useTokenInput' }\r\n  )\r\n)\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { BagStatus } from 'nft/types'\r\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\r\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\r\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { useBag } from './useBag'\r\nimport { usePurchaseAssets } from './usePurchaseAssets'\r\nimport { useTokenInput } from './useTokenInput'\r\n\r\nexport function useFetchAssets(): () => Promise<void> {\r\n  const { account } = useWeb3React()\r\n\r\n  const {\r\n    itemsInBag: uncheckedItemsInBag,\r\n    setBagStatus,\r\n    didOpenUnavailableAssets,\r\n    setDidOpenUnavailableAssets,\r\n    isLocked: bagIsLocked,\r\n    setLocked: setBagLocked,\r\n    setItemsInBag,\r\n  } = useBag(\r\n    ({\r\n      itemsInBag,\r\n      setBagStatus,\r\n      didOpenUnavailableAssets,\r\n      setDidOpenUnavailableAssets,\r\n      isLocked,\r\n      setLocked,\r\n      setItemsInBag,\r\n    }) => ({\r\n      itemsInBag,\r\n      setBagStatus,\r\n      didOpenUnavailableAssets,\r\n      setDidOpenUnavailableAssets,\r\n      isLocked,\r\n      setLocked,\r\n      setItemsInBag,\r\n    }),\r\n    shallow\r\n  )\r\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\r\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\r\n\r\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\r\n  const purchaseAssets = usePurchaseAssets()\r\n\r\n  const resetStateBeforeFetch = useCallback(() => {\r\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\r\n    !bagIsLocked && setBagLocked(true)\r\n    setBagStatus(BagStatus.FETCHING_ROUTE)\r\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\r\n\r\n  return useCallback(async () => {\r\n    resetStateBeforeFetch()\r\n\r\n    fetchGqlRoute({\r\n      variables: {\r\n        senderAddress: account ? account : '',\r\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\r\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\r\n      },\r\n      onCompleted: (data) => {\r\n        if (!data.nftRoute || !data.nftRoute.route) {\r\n          setBagStatus(BagStatus.ADDING_TO_BAG)\r\n          setBagLocked(false)\r\n          return\r\n        }\r\n\r\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\r\n        const purchasingWithErc20 = !!tokenTradeInput\r\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\r\n\r\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\r\n\r\n        setItemsInBag(newBagItems)\r\n        setBagStatus(nextBagStatus)\r\n\r\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\r\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\r\n          setBagLocked(true)\r\n          return\r\n        }\r\n\r\n        setBagLocked(false)\r\n      },\r\n    })\r\n  }, [\r\n    account,\r\n    fetchGqlRoute,\r\n    itemsInBag,\r\n    purchaseAssets,\r\n    resetStateBeforeFetch,\r\n    setBagLocked,\r\n    setBagStatus,\r\n    setItemsInBag,\r\n    tokenTradeInput,\r\n  ])\r\n}\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\r\nimport { useCallback } from 'react'\r\nimport shallow from 'zustand/shallow'\r\n\r\nimport { useBag } from './useBag'\r\nimport { useSendTransaction } from './useSendTransaction'\r\nimport { useTransactionResponse } from './useTransactionResponse'\r\n\r\nexport function usePurchaseAssets(): (\r\n  routingData: RouteResponse,\r\n  assetsToBuy: UpdatedGenieAsset[],\r\n  purchasingWithErc20?: boolean\r\n) => Promise<void> {\r\n  const { provider } = useWeb3React()\r\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\r\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\r\n\r\n  const {\r\n    setLocked: setBagLocked,\r\n    setBagExpanded,\r\n    reset: resetBag,\r\n  } = useBag(\r\n    ({ setLocked, setBagExpanded, reset }) => ({\r\n      setLocked,\r\n      setBagExpanded,\r\n      reset,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  return useCallback(\r\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\r\n      if (!provider) return\r\n\r\n      const purchaseResponse = await sendTransaction(\r\n        provider.getSigner(),\r\n        assetsToBuy,\r\n        routingData,\r\n        purchasingWithErc20\r\n      )\r\n\r\n      if (purchaseResponse) {\r\n        setBagLocked(false)\r\n        setTransactionResponse(purchaseResponse)\r\n        setBagExpanded({ bagExpanded: false })\r\n        resetBag()\r\n      }\r\n    },\r\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\r\n  )\r\n}\r\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\r\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { Pool } from '@uniswap/v3-sdk'\r\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { InterfaceTrade } from 'state/routing/types'\r\n\r\ninterface SwapAmounts {\r\n  inputAmount: CurrencyAmount<Currency>\r\n  outputAmount: CurrencyAmount<Currency>\r\n}\r\n\r\ninterface TradeTokenInputAmounts {\r\n  inputAmount: TokenAmountInput\r\n  outputAmount: TokenAmountInput\r\n}\r\n\r\ninterface Swap {\r\n  route: IRoute<Currency, Currency, Pair | Pool>\r\n  inputAmount: CurrencyAmount<Currency>\r\n  outputAmount: CurrencyAmount<Currency>\r\n}\r\n\r\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\r\n  return {\r\n    inputAmount: {\r\n      amount: swapAmounts.inputAmount.quotient.toString(),\r\n      token: {\r\n        address: swapAmounts.inputAmount.currency.isToken\r\n          ? swapAmounts.inputAmount.currency.address\r\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\r\n        chainId: swapAmounts.inputAmount.currency.chainId,\r\n        decimals: swapAmounts.inputAmount.currency.decimals,\r\n        isNative: swapAmounts.inputAmount.currency.isNative,\r\n      },\r\n    },\r\n    outputAmount: {\r\n      amount: swapAmounts.outputAmount.quotient.toString(),\r\n      token: {\r\n        address: swapAmounts.outputAmount.currency.isToken\r\n          ? swapAmounts.outputAmount.currency.address\r\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\r\n        chainId: swapAmounts.outputAmount.currency.chainId,\r\n        decimals: swapAmounts.outputAmount.currency.decimals,\r\n        isNative: swapAmounts.outputAmount.currency.isNative,\r\n      },\r\n    },\r\n  }\r\n}\r\n\r\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\r\n  const isPool = 'fee' in pool\r\n\r\n  return {\r\n    pair: !isPool\r\n      ? {\r\n          tokenAmountA: {\r\n            amount: pool.reserve0.quotient.toString(),\r\n            token: {\r\n              address: pool.token0.address,\r\n              chainId: pool.token0.chainId,\r\n              decimals: pool.token0.decimals,\r\n              isNative: pool.token0.isNative,\r\n            },\r\n          },\r\n          tokenAmountB: {\r\n            amount: pool.reserve1.quotient.toString(),\r\n            token: {\r\n              address: pool.token1.address,\r\n              chainId: pool.token1.chainId,\r\n              decimals: pool.token1.decimals,\r\n              isNative: pool.token1.isNative,\r\n            },\r\n          },\r\n        }\r\n      : undefined,\r\n    pool: isPool\r\n      ? {\r\n          fee: pool.fee,\r\n          liquidity: pool.liquidity.toString(),\r\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\r\n          tickCurrent: pool.tickCurrent.toString(),\r\n          tokenA: {\r\n            address: pool.token0.address,\r\n            chainId: pool.token0.chainId,\r\n            decimals: pool.token0.decimals,\r\n            isNative: pool.token0.isNative,\r\n          },\r\n          tokenB: {\r\n            address: pool.token1.address,\r\n            chainId: pool.token1.chainId,\r\n            decimals: pool.token1.decimals,\r\n            isNative: pool.token1.isNative,\r\n          },\r\n        }\r\n      : undefined,\r\n  }\r\n}\r\n\r\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\r\n  return pools.map((pool) => buildPool(pool))\r\n}\r\n\r\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\r\n  return {\r\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\r\n    pools: buildPools(swap.route.pools),\r\n  }\r\n}\r\n\r\nexport function buildAllTradeRouteInputs(trade: InterfaceTrade<Currency, Currency, TradeType>): {\r\n  mixedTokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\r\n  v2TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\r\n  v3TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\r\n} {\r\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\r\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\r\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\r\n\r\n  const swaps = trade.swaps\r\n\r\n  for (const swap of swaps) {\r\n    if (swap.route.protocol === Protocol.MIXED) {\r\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\r\n    } else if (swap.route.protocol === Protocol.V2) {\r\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\r\n    } else {\r\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\r\n    }\r\n  }\r\n\r\n  return {\r\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\r\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\r\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\r\n  }\r\n}\r\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\r\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { Allowance } from 'hooks/usePermit2Allowance'\r\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\r\nimport { useEffect } from 'react'\r\nimport { InterfaceTrade } from 'state/routing/types'\r\n\r\nimport { useTokenInput } from './useTokenInput'\r\n\r\nexport default function usePayWithAnyTokenSwap(\r\n  trade?: InterfaceTrade<Currency, Currency, TradeType> | undefined,\r\n  allowance?: Allowance,\r\n  allowedSlippage?: Percent\r\n) {\r\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\r\n  const hasRoutes = !!trade && trade.routes\r\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\r\n  const hasAllowance = !!allowedSlippage && !!allowance\r\n\r\n  useEffect(() => {\r\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\r\n      setTokenTradeInput(undefined)\r\n      return\r\n    }\r\n\r\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\r\n\r\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\r\n      buildAllTradeRouteInputs(trade)\r\n\r\n    const routes: TokenTradeRoutesInput = {\r\n      mixedRoutes: mixedTokenTradeRouteInputs,\r\n      tradeType: TokenTradeType.ExactOutput,\r\n      v2Routes: v2TokenTradeRouteInputs,\r\n      v3Routes: v3TokenTradeRouteInputs,\r\n    }\r\n\r\n    const permitInput: PermitInput | undefined =\r\n      'permitSignature' in allowance && allowance.permitSignature\r\n        ? {\r\n            details: {\r\n              amount: allowance.permitSignature.details.amount.toString(),\r\n              expiration: allowance.permitSignature.details.expiration.toString(),\r\n              nonce: allowance.permitSignature.details.nonce.toString(),\r\n              token: allowance.permitSignature.details.token,\r\n            },\r\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\r\n            signature: allowance.permitSignature.signature,\r\n            spender: allowance.permitSignature.spender,\r\n          }\r\n        : undefined\r\n\r\n    setTokenTradeInput({\r\n      permit: permitInput,\r\n      routes,\r\n      slippageToleranceBasisPoints: slippage,\r\n      tokenAmount: {\r\n        amount: trade.inputAmount.quotient.toString(),\r\n        token: {\r\n          address: trade.inputAmount.currency.address,\r\n          chainId: trade.inputAmount.currency.chainId,\r\n          decimals: trade.inputAmount.currency.decimals,\r\n          isNative: trade.inputAmount.currency.isNative,\r\n        },\r\n      },\r\n    })\r\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\r\n}\r\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\r\nimport { useMemo } from 'react'\r\nimport { InterfaceTrade } from 'state/routing/types'\r\nimport { useTheme } from 'styled-components/macro'\r\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\r\n\r\nexport interface PriceImpact {\r\n  priceImpactSeverity: PriceImpactSeverity\r\n  displayPercentage(): string\r\n}\r\n\r\ninterface PriceImpactSeverity {\r\n  type: 'warning' | 'error'\r\n  color: string\r\n}\r\n\r\nexport function usePriceImpact(trade?: InterfaceTrade<Currency, Currency, TradeType>): PriceImpact | undefined {\r\n  const theme = useTheme()\r\n\r\n  return useMemo(() => {\r\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\r\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\r\n    const warningColor =\r\n      priceImpactWarning === 'error'\r\n        ? //@ts-ignore\r\n        theme.accentCritical\r\n        : priceImpactWarning === 'warning'\r\n        ? //@ts-ignore\r\n        theme.accentWarning\r\n        : undefined\r\n\r\n    return marketPriceImpact && priceImpactWarning && warningColor\r\n      ? {\r\n          priceImpactSeverity: {\r\n            type: priceImpactWarning,\r\n            color: warningColor,\r\n          },\r\n          displayPercentage: () => toHumanReadablePercent(marketPriceImpact),\r\n        }\r\n      : undefined\r\n  }, //@ts-ignore\r\n  [theme.accentCritical, theme.accentWarning, trade])\r\n}\r\n\r\nfunction toHumanReadablePercent(priceImpact: Percent): string {\r\n  const sign = priceImpact.lessThan(0) ? '+' : ''\r\n  const exactFloat = (Number(priceImpact.numerator) / Number(priceImpact.denominator)) * 100\r\n  if (exactFloat < 0.005) {\r\n    return '0.00%'\r\n  }\r\n  const number = parseFloat(priceImpact.multiply(-1)?.toFixed(2))\r\n  return `${sign}${number}%`\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther, parseEther } from '@ethersproject/units'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\r\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\r\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Column from 'components/Column'\r\nimport Loader from 'components/Icons/LoadingSpinner'\r\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\r\nimport Row from 'components/Row'\r\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { MouseoverTooltip } from 'components/Tooltip'\r\nimport { useToggleWalletDrawer } from 'components/WalletDropdown'\r\nimport { SupportedChainId } from 'constants/chains'\r\nimport { usePayWithAnyTokenEnabled } from 'featureFlags/flags/payWithAnyToken'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { AllowanceState } from 'hooks/usePermit2Allowance'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { useBag } from 'nft/hooks/useBag'\r\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\r\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\r\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\r\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\r\nimport usePermit2Approval from 'nft/hooks/usePermit2Approval'\r\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\r\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\r\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\r\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\r\nimport { BagStatus } from 'nft/types'\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\r\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\r\nimport { AlertTriangle, ChevronDown } from 'react-feather'\r\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\nimport { switchChain } from 'utils/switchChain'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nconst FooterContainer = styled.div`\r\n  padding: 0px 12px;\r\n`\r\n\r\nconst Footer = styled.div`\r\n  border-top: 1px solid ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.backgroundOutline};\r\n  color: ${({ theme }) =>\r\n      //@ts-ignore\r\n      theme.textPrimary};\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0px 16px 8px;\r\n  padding: 12px 0px;\r\n  border-bottom-left-radius: 12px;\r\n  border-bottom-right-radius: 12px;\r\n`\r\n\r\nconst FooterHeader = styled(Column)<{ usingPayWithAnyToken?: boolean }>`\r\n  padding-top: 8px;\r\n  padding-bottom: ${({ usingPayWithAnyToken }) => (usingPayWithAnyToken ? '16px' : '20px')};\r\n`\r\n\r\nconst CurrencyRow = styled(Row)`\r\n  justify-content: space-between;\r\n  align-items: start;\r\n  gap: 8px;\r\n`\r\n\r\nconst TotalColumn = styled(Column)`\r\n  text-align: end;\r\n  overflow-x: hidden;\r\n`\r\n\r\nconst WarningIcon = styled(AlertTriangle)`\r\n  width: 14px;\r\n  margin-right: 4px;\r\n  color: inherit;\r\n`\r\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\r\n  align-items: center;\r\n  color: ${({ $color }) => $color};\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 10px !important;\r\n  text-align: center;\r\n`\r\n\r\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\r\n  color: ${({ $color }) => $color};\r\n  display: flex;\r\n  justify-content: center;\r\n  text-align: center;\r\n  margin-bottom: 10px !important;\r\n`\r\n\r\nconst CurrencyInput = styled(Row)`\r\n  gap: 8px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PayButton = styled.button<{ $backgroundColor: string; $color: string }>`\r\n  display: flex;\r\n  background: ${({ $backgroundColor }) => $backgroundColor};\r\n  color: ${({ $color }) => $color};\r\n  font-weight: 600;\r\n  line-height: 24px;\r\n  font-size: 16px;\r\n  gap: 16px;\r\n  justify-content: center;\r\n  border: none;\r\n  border-radius: 12px;\r\n  padding: 12px 0px;\r\n  cursor: pointer;\r\n  align-items: center;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: auto;\r\n  }\r\n`\r\nconst FiatLoadingBubble = styled(LoadingBubble)`\r\n  border-radius: 4px;\r\n  width: 4rem;\r\n  height: 20px;\r\n  align-self: end;\r\n`\r\nconst PriceImpactContainer = styled(Row)`\r\n  align-items: center;\r\n  gap: 8px;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst PriceImpactRow = styled(Row)`\r\n  align-items: center;\r\n  gap: 8px;\r\n`\r\n\r\nconst ValueText = styled(ThemedText.BodyPrimary)`\r\n  line-height: 20px;\r\n  font-weight: 500;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  scrollbar-width: none;\r\n\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\ninterface ActionButtonProps {\r\n  disabled?: boolean\r\n  onClick: () => void\r\n  backgroundColor: string\r\n  textColor: string\r\n}\r\n\r\nconst ActionButton = ({\r\n  disabled,\r\n  children,\r\n  onClick,\r\n  backgroundColor,\r\n  textColor,\r\n}: PropsWithChildren<ActionButtonProps>) => {\r\n  return (\r\n    <PayButton disabled={disabled} onClick={onClick} $backgroundColor={backgroundColor} $color={textColor}>\r\n      {children}\r\n    </PayButton>\r\n  )\r\n}\r\n\r\ninterface HelperTextProps {\r\n  color: string\r\n}\r\n\r\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\r\n  if (!children) {\r\n    return null\r\n  }\r\n  return (\r\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\r\n      <WarningIcon />\r\n      {children}\r\n    </WarningText>\r\n  )\r\n}\r\n\r\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\r\n  if (!children) {\r\n    return null\r\n  }\r\n  return (\r\n    <HelperText lineHeight=\"16px\" $color={color}>\r\n      {children}\r\n    </HelperText>\r\n  )\r\n}\r\n\r\nconst InputCurrencyValue = ({\r\n  usingPayWithAnyToken,\r\n  totalEthPrice,\r\n  activeCurrency,\r\n  tradeState,\r\n  trade,\r\n}: {\r\n  usingPayWithAnyToken: boolean\r\n  totalEthPrice: BigNumber\r\n  activeCurrency: Currency | undefined | null\r\n  tradeState: TradeState\r\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\r\n}) => {\r\n  if (!usingPayWithAnyToken) {\r\n    return (\r\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\r\n        {formatWeiToDecimal(totalEthPrice.toString())}\r\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\r\n      </ThemedText.BodyPrimary>\r\n    )\r\n  }\r\n\r\n  if (tradeState === TradeState.LOADING) {\r\n    return (\r\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\r\n        <Trans>Fetching price...</Trans>\r\n      </ThemedText.BodyPrimary>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ValueText color={tradeState === TradeState.SYNCING ? 'textTertiary' : 'textPrimary'}>\r\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\r\n    </ValueText>\r\n  )\r\n}\r\n\r\nconst FiatValue = ({\r\n  usdcValue,\r\n  priceImpact,\r\n  tradeState,\r\n  usingPayWithAnyToken,\r\n}: {\r\n  usdcValue: CurrencyAmount<Token> | null\r\n  priceImpact: PriceImpact | undefined\r\n  tradeState: TradeState\r\n  usingPayWithAnyToken: boolean\r\n}) => {\r\n  if (!usdcValue) {\r\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\r\n      return null\r\n    }\r\n\r\n    return <FiatLoadingBubble />\r\n  }\r\n\r\n  return (\r\n    <PriceImpactContainer>\r\n      {priceImpact && (\r\n        <>\r\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\r\n            <PriceImpactRow>\r\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\r\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\r\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\r\n              </ThemedText.BodySmall>\r\n            </PriceImpactRow>\r\n          </MouseoverTooltip>\r\n        </>\r\n      )}\r\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\r\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\r\n      </ThemedText.BodySmall>\r\n    </PriceImpactContainer>\r\n  )\r\n}\r\n\r\ninterface BagFooterProps {\r\n  setModalIsOpen: (open: boolean) => void\r\n  eventProperties: Record<string, unknown>\r\n}\r\n\r\nconst PENDING_BAG_STATUSES = [\r\n  BagStatus.FETCHING_ROUTE,\r\n  BagStatus.CONFIRMING_IN_WALLET,\r\n  BagStatus.FETCHING_FINAL_ROUTE,\r\n  BagStatus.PROCESSING_TRANSACTION,\r\n]\r\n\r\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\r\n  const toggleWalletDrawer = useToggleWalletDrawer()\r\n  const theme = useTheme()\r\n  const { account, chainId, connector } = useWeb3React()\r\n  const connected = Boolean(account && chainId)\r\n  const totalEthPrice = useBagTotalEthPrice()\r\n  const shouldUsePayWithAnyToken = usePayWithAnyTokenEnabled()\r\n  const inputCurrency = useTokenInput((state) => state.inputCurrency)\r\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\r\n  const defaultCurrency = useCurrency('ETH')\r\n  const inputCurrencyBalance = useTokenBalance(\r\n    account ?? undefined,\r\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\r\n  )\r\n  const {\r\n    isLocked: bagIsLocked,\r\n    bagStatus,\r\n    setBagExpanded,\r\n    setBagStatus,\r\n  } = useBag(\r\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\r\n      isLocked,\r\n      bagStatus,\r\n      setBagExpanded,\r\n      setBagStatus,\r\n    }),\r\n    shallow\r\n  )\r\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\r\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\r\n  const activeCurrency = inputCurrency ?? defaultCurrency\r\n  const usingPayWithAnyToken = !!inputCurrency && shouldUsePayWithAnyToken && chainId === SupportedChainId.AVALANCHE\r\n\r\n  useSubscribeTransactionState(setModalIsOpen)\r\n  const fetchAssets = useFetchAssets()\r\n\r\n  const parsedOutputAmount = useMemo(() => {\r\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\r\n  }, [defaultCurrency, totalEthPrice])\r\n  const {\r\n    state: tradeState,\r\n    trade,\r\n    maximumAmountIn,\r\n    allowedSlippage,\r\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\r\n  const { allowance, isAllowancePending, isApprovalLoading, updateAllowance } = usePermit2Approval(\r\n    trade?.inputAmount.currency.isToken ? (trade?.inputAmount as CurrencyAmount<Token>) : undefined,\r\n    maximumAmountIn,\r\n    shouldUsePayWithAnyToken\r\n  )\r\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\r\n  const priceImpact = usePriceImpact(trade)\r\n\r\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\r\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\r\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\r\n\r\n  const { balance: balanceInEth } = useWalletBalance()\r\n  const sufficientBalance = useMemo(() => {\r\n    if (!connected || chainId !== SupportedChainId.AVALANCHE) {\r\n      return undefined\r\n    }\r\n\r\n    if (inputCurrency) {\r\n      const inputAmount = trade?.inputAmount\r\n\r\n      if (!inputCurrencyBalance || !inputAmount) {\r\n        return undefined\r\n      }\r\n\r\n      return !inputCurrencyBalance.lessThan(inputAmount)\r\n    }\r\n\r\n    return parseEther(balanceInEth).gte(totalEthPrice)\r\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\r\n\r\n  useEffect(() => {\r\n    setBagStatus(BagStatus.ADDING_TO_BAG)\r\n  }, [inputCurrency, setBagStatus])\r\n\r\n  const {\r\n    buttonText,\r\n    buttonTextColor,\r\n    disabled,\r\n    warningText,\r\n    warningTextColor,\r\n    helperText,\r\n    helperTextColor,\r\n    handleClick,\r\n    buttonColor,\r\n  } = useMemo(() => {\r\n    let handleClick: (() => void) | (() => Promise<void>) = fetchAssets\r\n    let buttonText = <Trans>Something went wrong</Trans>\r\n    let disabled = true\r\n    let warningText = undefined\r\n      //@ts-ignore\r\n    let warningTextColor = theme.accentWarning\r\n    let helperText = undefined\r\n      //@ts-ignore\r\n    let helperTextColor = theme.textSecondary\r\n      //@ts-ignore\r\n    let buttonColor = theme.accentAction\r\n      //@ts-ignore\r\n    let buttonTextColor = theme.accentTextLightPrimary\r\n\r\n    if (connected && chainId !== SupportedChainId.AVALANCHE) {\r\n      handleClick = () => switchChain(connector, SupportedChainId.AVALANCHE)\r\n      buttonText = <Trans>Switch networks</Trans>\r\n      disabled = false\r\n      warningText = <Trans>Wrong network</Trans>\r\n    } else if (sufficientBalance === false) {\r\n      buttonText = <Trans>Pay</Trans>\r\n      disabled = true\r\n      warningText = <Trans>Insufficient funds</Trans>\r\n    } else if (bagStatus === BagStatus.WARNING) {\r\n      warningText = <Trans>Something went wrong. Please try again.</Trans>\r\n    } else if (!connected) {\r\n      handleClick = () => {\r\n        toggleWalletDrawer()\r\n        setBagExpanded({ bagExpanded: false })\r\n      }\r\n      disabled = false\r\n      buttonText = <Trans>Connect wallet</Trans>\r\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\r\n      disabled = true\r\n      buttonText = <Trans>Proceed in wallet</Trans>\r\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\r\n      disabled = true\r\n      buttonText = <Trans>Transaction pending</Trans>\r\n    } else if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\r\n      disabled = true\r\n      buttonText = <Trans>Fetching Route</Trans>\r\n\r\n      if (tradeState === TradeState.INVALID) {\r\n        buttonText = <Trans>Pay</Trans>\r\n      }\r\n\r\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\r\n        buttonText = <Trans>Insufficient liquidity</Trans>\r\n      //@ts-ignore\r\n        buttonColor = theme.backgroundInteractive\r\n      //@ts-ignore\r\n        buttonTextColor = theme.textPrimary\r\n        helperText = <Trans>Insufficient pool liquidity to complete transaction</Trans>\r\n      }\r\n    } else if (allowance.state === AllowanceState.REQUIRED || allowance.state === AllowanceState.LOADING) {\r\n      handleClick = () => updateAllowance()\r\n      disabled = isAllowancePending || isApprovalLoading || allowance.state === AllowanceState.LOADING\r\n\r\n      if (allowance.state === AllowanceState.LOADING) {\r\n        buttonText = <Trans>Loading Allowance</Trans>\r\n      } else if (isAllowancePending) {\r\n        buttonText = <Trans>Approve in your wallet</Trans>\r\n      } else if (isApprovalLoading) {\r\n        buttonText = <Trans>Approval pending</Trans>\r\n      } else {\r\n        helperText = <Trans>An approval is needed to use this token. </Trans>\r\n        buttonText = <Trans>Approve</Trans>\r\n      }\r\n    } else if (bagStatus === BagStatus.CONFIRM_QUOTE) {\r\n      disabled = false\r\n      //@ts-ignore\r\n      warningTextColor = theme.accentAction\r\n      warningText = <Trans>Price updated</Trans>\r\n      buttonText = <Trans>Pay</Trans>\r\n    } else if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\r\n      disabled = false\r\n      buttonColor = priceImpact.priceImpactSeverity.color\r\n      helperText = <Trans>Price impact warning</Trans>\r\n      helperTextColor = priceImpact.priceImpactSeverity.color\r\n      buttonText = <Trans>Pay Anyway</Trans>\r\n    } else if (sufficientBalance === true) {\r\n      disabled = false\r\n      buttonText = <Trans>Pay</Trans>\r\n      helperText = usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined\r\n    }\r\n\r\n    return {\r\n      buttonText,\r\n      buttonTextColor,\r\n      disabled,\r\n      warningText,\r\n      warningTextColor,\r\n      helperText,\r\n      helperTextColor,\r\n      handleClick,\r\n      buttonColor,\r\n    }\r\n  }, [\r\n    fetchAssets,\r\n      //@ts-ignore\r\n    theme.accentWarning,\r\n      //@ts-ignore\r\n    theme.textSecondary,\r\n      //@ts-ignore\r\n    theme.accentAction,\r\n      //@ts-ignore\r\n    theme.accentTextLightPrimary,\r\n      //@ts-ignore\r\n    theme.backgroundInteractive,\r\n      //@ts-ignore\r\n    theme.textPrimary,\r\n    connected,\r\n    chainId,\r\n    sufficientBalance,\r\n    bagStatus,\r\n    usingPayWithAnyToken,\r\n    tradeState,\r\n    allowance.state,\r\n    priceImpact,\r\n    connector,\r\n    toggleWalletDrawer,\r\n    setBagExpanded,\r\n    isAllowancePending,\r\n    isApprovalLoading,\r\n    updateAllowance,\r\n  ])\r\n\r\n  const traceEventProperties = {\r\n    usd_value: usdcValue?.toExact(),\r\n    using_erc20: !!inputCurrency,\r\n    ...eventProperties,\r\n  }\r\n\r\n  return (\r\n    <FooterContainer>\r\n      <Footer>\r\n        {shouldUsePayWithAnyToken && (\r\n          <FooterHeader gap=\"xs\" usingPayWithAnyToken={shouldUsePayWithAnyToken}>\r\n            <CurrencyRow>\r\n              <Column gap=\"xs\">\r\n                <ThemedText.SubHeaderSmall>\r\n                  <Trans>Pay with</Trans>\r\n                </ThemedText.SubHeaderSmall>\r\n                <CurrencyInput\r\n                  onClick={() => {\r\n                    if (!bagIsLocked) {\r\n                      setTokenSelectorOpen(true)\r\n                      sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\r\n                    }\r\n                  }}\r\n                >\r\n                  <CurrencyLogo currency={activeCurrency} size=\"24px\" />\r\n                  <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\r\n                    {activeCurrency?.symbol}\r\n                  </ThemedText.HeadlineSmall>\r\n                  <ChevronDown size={20} color={\r\n      //@ts-ignore\r\n      theme.textSecondary} />\r\n                </CurrencyInput>\r\n              </Column>\r\n              <TotalColumn gap=\"xs\">\r\n                <ThemedText.SubHeaderSmall marginBottom=\"4px\">\r\n                  <Trans>Total</Trans>\r\n                </ThemedText.SubHeaderSmall>\r\n                <InputCurrencyValue\r\n                  usingPayWithAnyToken={usingPayWithAnyToken}\r\n                  totalEthPrice={totalEthPrice}\r\n                  activeCurrency={activeCurrency}\r\n                  tradeState={tradeState}\r\n                  trade={trade}\r\n                />\r\n              </TotalColumn>\r\n            </CurrencyRow>\r\n            <FiatValue\r\n              usdcValue={usdcValue}\r\n              priceImpact={priceImpact}\r\n              tradeState={tradeState}\r\n              usingPayWithAnyToken={usingPayWithAnyToken}\r\n            />\r\n          </FooterHeader>\r\n        )}\r\n        {!shouldUsePayWithAnyToken && (\r\n          <FooterHeader gap=\"xs\">\r\n            <Row justify=\"space-between\">\r\n              <div>\r\n                <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\r\n              </div>\r\n              <div>\r\n                <ThemedText.HeadlineSmall>\r\n                  {formatWeiToDecimal(totalEthPrice.toString())}\r\n                  &nbsp;{activeCurrency?.symbol ?? 'ETH'}\r\n                </ThemedText.HeadlineSmall>\r\n              </div>\r\n            </Row>\r\n            <FiatValue\r\n              usdcValue={usdcValue}\r\n              priceImpact={priceImpact}\r\n              tradeState={tradeState}\r\n              usingPayWithAnyToken={usingPayWithAnyToken}\r\n            />\r\n          </FooterHeader>\r\n        )}\r\n        <TraceEvent\r\n          events={[BrowserEvent.onClick]}\r\n          name={NFTEventName.NFT_BUY_BAG_PAY}\r\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\r\n          properties={{ ...traceEventProperties }}\r\n          shouldLogImpression={connected && !disabled}\r\n        >\r\n          <Warning color={warningTextColor}>{warningText}</Warning>\r\n          <Helper color={helperTextColor}>{helperText}</Helper>\r\n          <ActionButton\r\n            onClick={handleClick}\r\n            disabled={disabled || isPending}\r\n            backgroundColor={buttonColor}\r\n            textColor={buttonTextColor}\r\n          >\r\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\r\n            {buttonText}\r\n          </ActionButton>\r\n        </TraceEvent>\r\n      </Footer>\r\n      <CurrencySearchModal\r\n        isOpen={tokenSelectorOpen}\r\n        onDismiss={() => setTokenSelectorOpen(false)}\r\n        onCurrencySelect={(currency: Currency) => {\r\n          setInputCurrency(currency.isNative ? undefined : currency)\r\n          if (currency.isToken) {\r\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\r\n              token_address: currency.address,\r\n              token_symbol: currency.symbol,\r\n            })\r\n          }\r\n        }}\r\n        selectedCurrency={activeCurrency ?? undefined}\r\n        onlyShowCurrenciesWithBalance={true}\r\n      />\r\n    </FooterContainer>\r\n  )\r\n}\r\n","import { BagStatus, TxStateType } from 'nft/types'\r\nimport { useEffect, useRef } from 'react'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { useBag } from './useBag'\r\nimport { useSendTransaction } from './useSendTransaction'\r\n\r\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\r\n  const transactionState = useSendTransaction((state) => state.state)\r\n  const setTransactionState = useSendTransaction((state) => state.setState)\r\n  const transactionStateRef = useRef(transactionState)\r\n  const { setBagStatus, setLocked: setBagLocked } = useBag(\r\n    ({ setBagExpanded, setBagStatus, setLocked }) => ({\r\n      setBagExpanded,\r\n      setBagStatus,\r\n      setLocked,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  useEffect(() => {\r\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\r\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\r\n      if (transactionStateRef.current === TxStateType.Invalid) {\r\n        setBagStatus(BagStatus.WARNING)\r\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\r\n      setTransactionState(TxStateType.New)\r\n\r\n      setBagLocked(false)\r\n      setModalIsOpen(false)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\r\n}\r\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\r\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\r\nimport { useBestTrade } from 'hooks/useBestTrade'\r\nimport { useMemo } from 'react'\r\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\r\n\r\nexport default function useDerivedPayWithAnyTokenSwapInfo(\r\n  inputCurrency?: Currency,\r\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\r\n): {\r\n  state: TradeState\r\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\r\n  maximumAmountIn: CurrencyAmount<Token> | undefined\r\n  allowedSlippage: Percent\r\n} {\r\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\r\n  const allowedSlippage = useAutoSlippageTolerance(trade)\r\n  const maximumAmountIn = useMemo(() => {\r\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\r\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\r\n  }, [allowedSlippage, trade])\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      state,\r\n      trade,\r\n      maximumAmountIn,\r\n      allowedSlippage,\r\n    }\r\n  }, [allowedSlippage, maximumAmountIn, state, trade])\r\n}\r\n","import { sendAnalyticsEvent } from '@uniswap/analytics'\r\nimport { InterfaceEventName } from '@uniswap/analytics-events'\r\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\r\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\r\nimport { useCallback, useMemo, useState } from 'react'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport default function usePermit2Approval(\r\n  amount?: CurrencyAmount<Token>,\r\n  maximumAmount?: CurrencyAmount<Token>,\r\n  enabled?: boolean\r\n) {\r\n  const { chainId } = useWeb3React()\r\n\r\n  const allowance = usePermit2Allowance(\r\n    enabled ? maximumAmount ?? (amount?.currency.isToken ? (amount as CurrencyAmount<Token>) : undefined) : undefined,\r\n    enabled && chainId ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\r\n  )\r\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\r\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\r\n  const updateAllowance = useCallback(async () => {\r\n    invariant(allowance.state === AllowanceState.REQUIRED)\r\n    setIsAllowancePending(true)\r\n    try {\r\n      await allowance.approveAndPermit()\r\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\r\n        chain_id: chainId,\r\n        token_symbol: maximumAmount?.currency.symbol,\r\n        token_address: maximumAmount?.currency.address,\r\n      })\r\n    } catch (e) {\r\n      console.error(e)\r\n    } finally {\r\n      setIsAllowancePending(false)\r\n    }\r\n  }, [allowance, chainId, maximumAmount?.currency.address, maximumAmount?.currency.symbol])\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      allowance,\r\n      isApprovalLoading,\r\n      isAllowancePending,\r\n      updateAllowance,\r\n    }\r\n  }, [allowance, isAllowancePending, isApprovalLoading, updateAllowance])\r\n}\r\n","import { Box } from 'nft/components/Box'\r\nimport styled, { keyframes } from 'styled-components/macro'\r\n\r\nconst dash = keyframes`\r\n  0% {\r\n    stroke-dashoffset: 1000;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n`\r\nconst Circle = styled.circle`\r\n  stroke-dasharray: 1000;\r\n  stroke-dashoffset: 0;\r\n  -webkit-animation: ${dash} linear;\r\n  animation: ${dash} linear;\r\n  animation-duration: 160s;\r\n  stroke: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentAction};\r\n`\r\nexport const TimedLoader = () => {\r\n  const stroke = 1.5\r\n\r\n  return (\r\n    <Box display=\"flex\" position=\"absolute\">\r\n      <svg height=\"18px\" width=\"18px\">\r\n        <Circle\r\n          strokeWidth={`${stroke}`}\r\n          strokeLinecap=\"round\"\r\n          style={{\r\n            transform: 'rotate(90deg)',\r\n            transformOrigin: '50% 50%',\r\n          }}\r\n          fill=\"transparent\"\r\n          r=\"8px\"\r\n          cx=\"9px\"\r\n          cy=\"9px\"\r\n        />\r\n      </svg>\r\n    </Box>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagRow = '_1kuawc1 rgw6ez2qg rgw6ez2wv rgw6ez32w rgw6ez2jn rgw6ez52p rgw6ez4eq rgw6ez7y5 rgw6ez1lf rgw6ez7zp';\nexport var unavailableAssetsContainer = 'rgw6ez33o rgw6ez2kf rgw6ezok rgw6ezuz rgw6ez5gp rgw6ez4eq rgw6ez52p rgw6ez7yh rgw6ez87x rgw6ez5sd rgw6ez6op rgw6ez6cv rgw6ez1lf';\nexport var priceChangeColumn = 'rgw6ez33o rgw6ez2kf rgw6ezok rgw6ezuz rgw6ez5gp rgw6ez4ec rgw6ez52p rgw6ez7yh rgw6ez87x rgw6ez5sd rgw6ez6cv rgw6ez1lf rgw6ez7y5';\nexport var priceChangeRow = 'rgw6eze9 rgw6ezc4 rgw6ezg0 rgw6ez50j rgw6ez4dy';\nexport var bagRowImage = 'rgw6ez1aj rgw6ez1ii rgw6ez4xl rgw6ez7zh';\nexport var grayscaleImage = '_1kuawc7';\nexport var bagRowPrice = '_1kuawc9 rgw6ez4dy rgw6ezcb rgw6ezen rgw6ez4js';\nexport var assetName = '_1kuawcb rgw6ezcb rgw6ezeg rgw6ez8a9 rgw6ez4t4 rgw6ez4sx';\nexport var collectionName = 'rgw6eze9 rgw6ezc4 rgw6ezg0 rgw6ez8a9 rgw6ez4sx rgw6ez4t4 rgw6ez52v';\nexport var icon = 'rgw6ez4js';","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport clsx from 'clsx'\r\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\r\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Suspicious } from 'nft/components/card/icons'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport {\r\n  ChevronDownBagIcon,\r\n  ChevronUpBagIcon,\r\n  CircularCloseIcon,\r\n  CloseTimerIcon,\r\n  SquareArrowDownIcon,\r\n  SquareArrowUpIcon,\r\n  VerifiedIcon,\r\n} from 'nft/components/icons'\r\nimport { bodySmall } from 'nft/css/common.css'\r\nimport { loadingBlock } from 'nft/css/loading.css'\r\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\r\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components/macro'\r\n\r\nimport * as styles from './BagRow.css'\r\n\r\nexport const RemoveButton = styled(ThemeButton)`\r\n  border-radius: 12px;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-left: 16px;\r\n  padding: 12px 14px;\r\n`\r\nconst ReviewButton = styled(ThemeButton)`\r\n  border-radius: 12px;\r\n  flex: 1 1 auto;\r\n  font-size: 14px;\r\n  padding: 8px;\r\n  width: 50%;\r\n`\r\nconst RemoveAssetOverlay = styled.div`\r\n  position: absolute;\r\n  display: block;\r\n  right: -11px;\r\n  top: -11px;\r\n  z-index: 1;\r\n  transition: 250ms;\r\n  width: 45px;\r\n  height: 45px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\r\n  <RemoveAssetOverlay onClick={onClick}>\r\n    <CircularCloseIcon />\r\n  </RemoveAssetOverlay>\r\n)\r\n\r\nconst NoContentContainer = () => (\r\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\r\n    <Box\r\n      position=\"absolute\"\r\n      textAlign=\"center\"\r\n      left=\"1/2\"\r\n      top=\"1/2\"\r\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\r\n      color=\"gray500\"\r\n      fontSize=\"12\"\r\n      fontWeight=\"normal\"\r\n    >\r\n      Image\r\n      <br />\r\n      not\r\n      <br />\r\n      available\r\n    </Box>\r\n  </Box>\r\n)\r\n\r\ninterface BagRowProps {\r\n  asset: UpdatedGenieAsset\r\n  usdPrice: number | undefined\r\n  removeAsset: (assets: GenieAsset[]) => void\r\n  showRemove?: boolean\r\n  grayscale?: boolean\r\n  isMobile: boolean\r\n}\r\n\r\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\r\n  const [loadedImage, setImageLoaded] = useState(false)\r\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\r\n\r\n  const [cardHovered, setCardHovered] = useState(false)\r\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\r\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\r\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\r\n\r\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\r\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\r\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\r\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\r\n    true\r\n  )\r\n\r\n  const handleRemoveClick = useCallback(\r\n    (e: MouseEvent<HTMLElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      removeAsset([asset])\r\n    },\r\n    [asset, removeAsset]\r\n  )\r\n\r\n  return (\r\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\r\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n        <Box position=\"relative\" display=\"flex\">\r\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\r\n          {!noImageAvailable && (\r\n            <Box\r\n              as=\"img\"\r\n              src={asset.smallImageUrl}\r\n              alt={asset.name}\r\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\r\n              onLoad={() => {\r\n                setImageLoaded(true)\r\n              }}\r\n              onError={() => {\r\n                setNoImageAvailable(true)\r\n              }}\r\n              visibility={loadedImage ? 'visible' : 'hidden'}\r\n            />\r\n          )}\r\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\r\n          {noImageAvailable && <NoContentContainer />}\r\n        </Box>\r\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\r\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\r\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\r\n            {asset.susFlag && <Suspicious />}\r\n          </Row>\r\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\r\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\r\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\r\n          </Row>\r\n        </Column>\r\n        {showRemoveButton && (\r\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\r\n            Remove\r\n          </RemoveButton>\r\n        )}\r\n        {(!showRemoveButton || isMobile) && (\r\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\r\n            <Box className={styles.bagRowPrice}>\r\n              {assetEthPriceFormatted}\r\n              &nbsp;ETH\r\n            </Box>\r\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\r\n          </Column>\r\n        )}\r\n      </Row>\r\n    </Link>\r\n  )\r\n}\r\n\r\ninterface PriceChangeBagRowProps {\r\n  asset: UpdatedGenieAsset\r\n  usdPrice: number | undefined\r\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\r\n  top?: boolean\r\n  isMobile: boolean\r\n}\r\n\r\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\r\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\r\n  const handleRemove = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      const toKeep = false\r\n      markAssetAsReviewed(asset, toKeep)\r\n    },\r\n    [asset, markAssetAsReviewed]\r\n  )\r\n  const handleKeep = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      const toKeep = true\r\n      markAssetAsReviewed(asset, toKeep)\r\n    },\r\n    [asset, markAssetAsReviewed]\r\n  )\r\n  return (\r\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\r\n      <Row className={styles.priceChangeRow}>\r\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\r\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\r\n          asset.priceInfo.ETHPrice\r\n        )} ETH`}</Box>\r\n      </Row>\r\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\r\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\r\n      </Box>\r\n      <Row gap=\"8\" justifyContent=\"space-between\">\r\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\r\n          Remove\r\n        </ReviewButton>\r\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\r\n          Keep\r\n        </ReviewButton>\r\n      </Row>\r\n    </Column>\r\n  )\r\n}\r\n\r\ninterface UnavailableAssetsHeaderRowProps {\r\n  assets?: UpdatedGenieAsset[]\r\n  usdPrice: number | undefined\r\n  clearUnavailableAssets: () => void\r\n  didOpenUnavailableAssets: boolean\r\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\r\n  isMobile: boolean\r\n}\r\n\r\ninterface UnavailableAssetsPreviewProps {\r\n  assets: UpdatedGenieAsset[]\r\n}\r\n\r\nconst ASSET_PREVIEW_WIDTH = 32\r\nconst ASSET_PREVIEW_OFFSET = 20\r\n\r\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\r\n  <Column\r\n    display=\"grid\"\r\n    style={{\r\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\r\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\r\n    }}\r\n  >\r\n    {assets.map((asset, index) => (\r\n      <Box\r\n        key={`${asset.address}-${asset.tokenId}`}\r\n        as=\"img\"\r\n        src={asset.smallImageUrl}\r\n        width=\"32\"\r\n        height=\"32\"\r\n        borderStyle=\"solid\"\r\n        borderWidth=\"1px\"\r\n        borderColor=\"backgroundSurface\"\r\n        borderRadius=\"4\"\r\n        style={{ zIndex: index }}\r\n        className={styles.grayscaleImage}\r\n      />\r\n    ))}\r\n  </Column>\r\n)\r\n\r\nexport const UnavailableAssetsHeaderRow = ({\r\n  assets,\r\n  usdPrice,\r\n  clearUnavailableAssets,\r\n  didOpenUnavailableAssets,\r\n  setDidOpenUnavailableAssets,\r\n  isMobile,\r\n}: UnavailableAssetsHeaderRowProps) => {\r\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\r\n  const timerLimit = 8\r\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\r\n\r\n  useEffect(() => {\r\n    if (!timeLeft) {\r\n      if (!didOpenUnavailableAssets) {\r\n        clearUnavailableAssets()\r\n        setDidOpenUnavailableAssets(false)\r\n      }\r\n      return\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      setTimeLeft(timeLeft - 1)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(intervalId)\r\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\r\n\r\n  if (!assets || assets.length === 0) return null\r\n\r\n  const moreThanOneUnavailable = assets.length > 1\r\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\r\n\r\n  return (\r\n    <Column className={styles.unavailableAssetsContainer}>\r\n      <Column>\r\n        <Row\r\n          justifyContent=\"space-between\"\r\n          marginBottom={isShowingAssets ? '12' : '0'}\r\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\r\n          onClick={() => {\r\n            if (moreThanOneUnavailable) {\r\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\r\n              toggleOpen()\r\n            }\r\n          }}\r\n        >\r\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\r\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\r\n            No longer available\r\n          </Row>\r\n          {moreThanOneUnavailable && (\r\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\r\n          )}\r\n          {!didOpenUnavailableAssets && (\r\n            <Row\r\n              position=\"relative\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n              color=\"textPrimary\"\r\n              justifyContent=\"center\"\r\n              cursor=\"pointer\"\r\n              onClick={clearUnavailableAssets}\r\n            >\r\n              <TimedLoader />\r\n              <CloseTimerIcon />\r\n            </Row>\r\n          )}\r\n        </Row>\r\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\r\n          {isShowingAssets &&\r\n            assets.map((asset) => (\r\n              <BagRow\r\n                key={asset.id}\r\n                asset={asset}\r\n                usdPrice={usdPrice}\r\n                removeAsset={() => undefined}\r\n                grayscale\r\n                isMobile={isMobile}\r\n              />\r\n            ))}\r\n        </Column>\r\n      </Column>\r\n    </Column>\r\n  )\r\n}\r\n","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\r\nimport { NFTEventName } from '@uniswap/analytics-events'\r\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\r\nimport { Column } from 'nft/components/Flex'\r\nimport { useBag, useIsMobile } from 'nft/hooks'\r\nimport { BagItemStatus, BagStatus } from 'nft/types'\r\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useQuery } from 'react-query'\r\n\r\nexport const BagContent = () => {\r\n  const bagStatus = useBag((s) => s.bagStatus)\r\n  const setBagStatus = useBag((s) => s.setBagStatus)\r\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\r\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\r\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\r\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\r\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\r\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\r\n\r\n  const isMobile = useIsMobile()\r\n\r\n  const itemsInBag = useMemo(() => {\r\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\r\n  }, [uncheckedItemsInBag])\r\n\r\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\r\n\r\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\r\n    const unchangedAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\r\n      .map((item) => item.asset)\r\n    const priceChangedAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\r\n      .map((item) => item.asset)\r\n    const unavailableAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\r\n      .map((item) => item.asset)\r\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\r\n\r\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\r\n  }, [itemsInBag])\r\n\r\n  useEffect(() => {\r\n    const hasAssetsInReview = priceChangedAssets.length > 0\r\n    const hasAssets = itemsInBag.length > 0\r\n\r\n    if (hasAssetsInReview)\r\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\r\n        usd_value: fetchedPriceData,\r\n        bag_quantity: itemsInBag,\r\n        ...formatAssetEventProperties(priceChangedAssets),\r\n      })\r\n\r\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\r\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\r\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\r\n    }\r\n\r\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\r\n      setBagStatus(BagStatus.ADDING_TO_BAG)\r\n    }\r\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\r\n\r\n  return (\r\n    <>\r\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\r\n        {unavailableAssets.length > 0 && (\r\n          <Trace\r\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\r\n            properties={{\r\n              usd_value: fetchedPriceData,\r\n              bag_quantity: itemsInBag.length,\r\n              ...formatAssetEventProperties(unavailableAssets),\r\n            }}\r\n            shouldLogImpression\r\n          >\r\n            <UnavailableAssetsHeaderRow\r\n              assets={unavailableAssets}\r\n              usdPrice={fetchedPriceData}\r\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\r\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\r\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\r\n              isMobile={isMobile}\r\n            />\r\n          </Trace>\r\n        )}\r\n        {priceChangedAssets.map((asset, index) => (\r\n          <PriceChangeBagRow\r\n            key={asset.id}\r\n            asset={asset}\r\n            usdPrice={fetchedPriceData}\r\n            markAssetAsReviewed={markAssetAsReviewed}\r\n            top={index === 0 && unavailableAssets.length === 0}\r\n            isMobile={isMobile}\r\n          />\r\n        ))}\r\n      </Column>\r\n      <Column>\r\n        {unchangedAssets\r\n          .slice(0)\r\n          .reverse()\r\n          .map((asset) => (\r\n            <BagRow\r\n              key={asset.id}\r\n              asset={asset}\r\n              usdPrice={fetchedPriceData}\r\n              removeAsset={removeAssetsFromBag}\r\n              showRemove={true}\r\n              isMobile={isMobile}\r\n            />\r\n          ))}\r\n      </Column>\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { OpacityHoverState } from 'components/Common'\r\nimport { BagCloseIcon } from 'nft/components/icons'\r\nimport { useMemo } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { ButtonText, ThemedText } from 'theme'\r\n\r\nconst ClearButton = styled(ButtonText)`\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.textSecondary};\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nconst IconWrapper = styled.button`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border-radius: 8px;\r\n  border: none;\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.textPrimary};\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  margin-left: auto;\r\n  padding: 2px;\r\n  opacity: 1;\r\n\r\n  ${OpacityHoverState}\r\n`\r\nconst CounterDot = styled.div<{ sizing: string }>`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentAction};\r\n  border-radius: 100px;\r\n  font-weight: bold;\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentTextLightPrimary};\r\n  display: flex;\r\n  font-size: 10px;\r\n  justify-content: center;\r\n  min-width: ${({ sizing }) => sizing};\r\n  min-height: ${({ sizing }) => sizing};\r\n  padding: 4px 6px;\r\n`\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 8px;\r\n  justify-content: flex-start;\r\n  margin: 16px 28px;\r\n  text-align: center;\r\n`\r\ninterface BagHeaderProps {\r\n  numberOfAssets: number\r\n  closeBag: () => void\r\n  resetFlow: () => void\r\n  isProfilePage: boolean\r\n}\r\n\r\nconst BASE_SIZING = 14\r\nconst INCREMENTAL_SIZING = 6\r\n\r\nconst getCircleSizing = (numberOfAssets: number): string => {\r\n  const numberOfCharacters = numberOfAssets.toString().length\r\n\r\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\r\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\r\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\r\n}\r\n\r\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\r\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\r\n      {numberOfAssets > 0 && (\r\n        <>\r\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\r\n          <ClearButton onClick={resetFlow}>\r\n            <Trans>Clear all</Trans>\r\n          </ClearButton>\r\n        </>\r\n      )}\r\n      <IconWrapper onClick={closeBag}>\r\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\r\n      </IconWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\r\nimport { Center, Column } from 'nft/components/Flex'\r\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\r\nimport { subhead } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport styled from 'styled-components/macro'\r\n\r\nconst StyledColumn = styled(Column)`\r\n  gap: 12px;\r\n  margin-top: 68px;\r\n`\r\n\r\nconst EmptyState = () => {\r\n  const isProfilePage = useIsNftProfilePage()\r\n\r\n  return (\r\n    <StyledColumn>\r\n      <Center>\r\n        {isProfilePage ? (\r\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\r\n        ) : (\r\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\r\n        )}\r\n      </Center>\r\n      {isProfilePage ? (\r\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\r\n          No NFTs selected\r\n        </Center>\r\n      ) : (\r\n        <Column gap=\"16\">\r\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\r\n            Your bag is empty\r\n          </Center>\r\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\r\n            Selected NFTs will appear here\r\n          </Center>\r\n        </Column>\r\n      )}\r\n    </StyledColumn>\r\n  )\r\n}\r\n\r\nexport default EmptyState\r\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\r\nimport { WalletAsset } from 'nft/types'\r\nimport { useState } from 'react'\r\n\r\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\r\nimport * as styles from '../BagRow.css'\r\n\r\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\r\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const isMobile = useIsMobile()\r\n  const [hovered, setHovered] = useState(false)\r\n  const handleHover = () => setHovered(!hovered)\r\n\r\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    removeAsset(asset)\r\n  }\r\n\r\n  return (\r\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\r\n      <Box position=\"relative\" display=\"flex\">\r\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\r\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\r\n      </Box>\r\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\r\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\r\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\r\n        </Row>\r\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\r\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\r\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\r\n        </Row>\r\n      </Column>\r\n      {hovered && !isMobile && (\r\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\r\n          Remove\r\n        </RemoveButton>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileAssetRow\r\n","import { Column } from 'nft/components/Flex'\r\nimport { useSellAsset } from 'nft/hooks'\r\n\r\nimport ProfileAssetRow from './ProfileAssetRow'\r\n\r\nexport const ProfileBagContent = () => {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  return (\r\n    <Column>\r\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\r\n    </Column>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\r\nimport { NFTEventName } from '@uniswap/analytics-events'\r\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\r\nimport { BagFooter } from 'nft/components/bag/BagFooter'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Portal } from 'nft/components/common/Portal'\r\nimport { Column } from 'nft/components/Flex'\r\nimport { Overlay } from 'nft/components/modals/Overlay'\r\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset } from 'nft/hooks'\r\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\r\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport * as styles from './Bag.css'\r\nimport { BagContent } from './BagContent'\r\nimport { BagHeader } from './BagHeader'\r\nimport EmptyState from './EmptyContent'\r\nimport { ProfileBagContent } from './profile/ProfileBagContent'\r\n\r\nexport const BAG_WIDTH = 320\r\nexport const XXXL_BAG_WIDTH = 360\r\n\r\ninterface SeparatorProps {\r\n  top?: boolean\r\n  show?: boolean\r\n}\r\n\r\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\r\n  position: fixed;\r\n  display: flex;\r\n  flex-direction: column;\r\n  top: 88px;\r\n  right: 20px;\r\n  width: ${BAG_WIDTH}px;\r\n  height: calc(100vh - 108px);\r\n  background: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.backgroundSurface};\r\n  border: 1px solid ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.backgroundOutline};\r\n  border-radius: 16px;\r\n  box-shadow: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.shallowShadow};\r\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\r\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${\r\n      //@ts-ignore\r\n      theme.breakpoint.sm}px`}) {\r\n    right: 0px;\r\n    top: 0px;\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 0px;\r\n    border: none;\r\n  }\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${\r\n      //@ts-ignore\r\n      theme.breakpoint.xxxl}px`}) {\r\n    width: ${XXXL_BAG_WIDTH}px;\r\n  }\r\n`\r\n\r\nconst DetailsPageBackground = styled.div`\r\n  position: fixed;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  top: 0px;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ContinueButton = styled.div`\r\n  background: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentAction};\r\n  color: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.accentTextLightPrimary};\r\n  margin: 32px 28px 16px;\r\n  padding: 10px 0px;\r\n  border-radius: 12px;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  line-height: 20px;\r\n  cursor: pointer;\r\n  transition: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.transition.duration.medium};\r\n\r\n  :hover {\r\n    opacity: ${({ theme }) => \r\n      //@ts-ignore\r\n      theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\r\n  <Box\r\n    marginX=\"24\"\r\n    borderWidth=\"1px\"\r\n    borderStyle=\"solid\"\r\n    borderColor=\"transparent\"\r\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\r\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\r\n    opacity={show ? '1' : '0'}\r\n    transition=\"250\"\r\n  />\r\n)\r\n\r\nconst Bag = () => {\r\n  const { resetSellAssets, sellAssets } = useSellAsset(\r\n    ({ reset, sellAssets }) => ({\r\n      resetSellAssets: reset,\r\n      sellAssets,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\r\n\r\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag(\r\n    (state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }),\r\n    shallow\r\n  )\r\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\r\n\r\n  const isProfilePage = useIsNftProfilePage()\r\n  const isDetailsPage = useIsNftDetailsPage()\r\n  const isNFTPage = useIsNftPage()\r\n  const isMobile = useIsMobile()\r\n\r\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\r\n\r\n  const [isModalOpen, setModalIsOpen] = useState(false)\r\n  const [userCanScroll, setUserCanScroll] = useState(false)\r\n  const [scrollProgress, setScrollProgress] = useState(0)\r\n  const scrollRef = (node: HTMLDivElement) => {\r\n    if (node !== null) {\r\n      const canScroll = node.scrollHeight > node.clientHeight\r\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\r\n    }\r\n  }\r\n\r\n  const handleCloseBag = useCallback(() => {\r\n    setBagExpanded({ bagExpanded: false, manualClose: true })\r\n  }, [setBagExpanded])\r\n\r\n  useEffect(() => {\r\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\r\n  }, [bagIsLocked, isModalOpen])\r\n\r\n  const hasAssetsToShow = itemsInBag.length > 0\r\n\r\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\r\n    const scrollTop = event.currentTarget.scrollTop\r\n    const containerHeight = event.currentTarget.clientHeight\r\n    const scrollHeight = event.currentTarget.scrollHeight\r\n\r\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\r\n  }\r\n\r\n  const isBuyingAssets = itemsInBag.length > 0\r\n  const isSellingAssets = sellAssets.length > 0\r\n\r\n  const shouldRenderEmptyState = Boolean(\r\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\r\n  )\r\n\r\n  const eventProperties = useMemo(\r\n    () => ({\r\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\r\n    }),\r\n    [itemsInBag]\r\n  )\r\n\r\n  if (!bagExpanded || !isNFTPage) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Portal>\r\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\r\n        <BagHeader\r\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\r\n          closeBag={handleCloseBag}\r\n          resetFlow={isProfilePage ? resetSellAssets : reset}\r\n          isProfilePage={isProfilePage}\r\n        />\r\n        {shouldRenderEmptyState && <EmptyState />}\r\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\r\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\r\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\r\n        </Column>\r\n        {hasAssetsToShow && !isProfilePage && (\r\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\r\n        )}\r\n        {isSellingAssets && isProfilePage && (\r\n          <ContinueButton\r\n            onClick={() => {\r\n              toggleBag()\r\n              setProfilePageState(ProfilePageStateType.LISTING)\r\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\r\n                list_quantity: sellAssets.length,\r\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\r\n                token_ids: sellAssets.map((asset) => asset.tokenId),\r\n              })\r\n            }}\r\n          >\r\n            <Trans>Continue</Trans>\r\n          </ContinueButton>\r\n        )}\r\n      </BagContainer>\r\n\r\n      {isDetailsPage ? (\r\n        <DetailsPageBackground onClick={toggleBag} />\r\n      ) : (\r\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\r\n      )}\r\n    </Portal>\r\n  )\r\n}\r\n\r\nexport default Bag\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2r8 rgw6ez2xn rgw6ez29c rgw6ez8bl';\nexport var bagContainer = '_1jcz50r3 rgw6ez4wm rgw6ez3y0 rgw6ez42i rgw6ez1dg rgw6ez1lf rgw6ez3rl rgw6ez5dj rgw6ez7yp rgw6ez5p7 rgw6ez87x rgw6ez52p';","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { BagItemStatus } from 'nft/types'\r\nimport { useMemo } from 'react'\r\n\r\nimport { useBag } from './useBag'\r\n\r\nexport function useBagTotalEthPrice(): BigNumber {\r\n  const itemsInBag = useBag((state) => state.itemsInBag)\r\n\r\n  return useMemo(() => {\r\n    const totalEthPrice = itemsInBag.reduce(\r\n      (total, item) =>\r\n        item.status !== BagItemStatus.UNAVAILABLE\r\n          ? total.add(\r\n              BigNumber.from(\r\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\r\n              )\r\n            )\r\n          : total,\r\n      BigNumber.from(0)\r\n    )\r\n\r\n    return totalEthPrice\r\n  }, [itemsInBag])\r\n}\r\n\r\nexport function useBagTotalUsdPrice(): string | undefined {\r\n  const totalEthPrice = useBagTotalEthPrice()\r\n  const defaultCurrency = useCurrency('ETH')\r\n\r\n  const parsedOutputAmount = useMemo(() => {\r\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\r\n  }, [defaultCurrency, totalEthPrice])\r\n\r\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\r\n\r\n  return useMemo(() => {\r\n    return usdcValue?.toExact()\r\n  }, [usdcValue])\r\n}\r\n"],"sourceRoot":""}