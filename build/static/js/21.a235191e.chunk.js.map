{"version":3,"sources":["nft/types/airdrop/index.ts","assets/images/airdopBackground.png","nft/queries/genie/GetAirdorpMerkle.ts","components/AirdropModal/index.tsx"],"names":["Airdrop","CollectionRewardsFetcher","address","url","process","REACT_APP_TEMP_API_URL","controller","AbortController","timeoutId","setTimeout","abort","fetch","method","headers","r","clearInterval","json","data","RewardAmounts","ModalWrap","styled","div","Body","ClaimButton","ThemeButton","theme","accentAction","white","Line","LinkWrap","a","OpacityHoverState","ImageContainer","StyledImage","img","USDCLabel","TextContainer","RewardsDetailsContainer","CurrencyText","span","ClaimContainer","SuccessText","EtherscanLink","CloseButton","SyledCloseIcon","CloseIcon","Error","accentCritical","ReactLinkWrap","RewardsText","RewardsInformationText","textPrimary","MainHeader","EtherscanLinkWrap","AirdropModal","useWeb3React","account","provider","useState","claim","setClaim","isClaimed","setIsClaimed","hash","setHash","error","setError","setIsClaimAvailable","useIsNftClaimAvailable","state","isSubmitting","setIsSubmitting","totalAmount","setTotalAmount","isOpen","useModalIsOpen","ApplicationModal","UNISWAP_NFT_AIRDROP_CLAIM","usdcAirdropToggle","useToggleModal","contract","useContract","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","uniswapNftAirdropClaim","displayError","useEffect","find","rewardType","GENIE_UNISWAP_USDC_AIRDROP","connect","functions","index","usdAmount","BigNumber","from","amount","toNumber","makeClaim","merkleProof","getSigner","response","wait","Modal","hideBorder","onDismiss","maxHeight","maxWidth","HeadlineSmall","href","target","Link","size","ButtonSize","medium","emphasis","ButtonEmphasis","onClick","stroke","tradingRewardAmount","combinedAmount","holderRewardAmount","src","airdropBackgroundv2","disabled"],"mappings":"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","file":"static/js/21.a235191e.chunk.js","sourcesContent":["export enum Airdrop {\r\n  LOOKS_RARE_NFT_COMMERCE_REWARDS = 'LOOKS_RARE_NFT_COMMERCE_REWARDS',\r\n  GENIE_UNISWAP_USDC_AIRDROP = 'GENIE_UNISWAP_USDC_AIRDROP',\r\n}\r\n\r\nexport interface Rewards {\r\n  amount: string\r\n  walletAddress: string\r\n  tokenAddress: string\r\n  merkleProof: Array<string>\r\n  rewardType: Airdrop\r\n  chainId: number\r\n  index: number\r\n}\r\n","export default __webpack_public_path__ + \"static/media/airdopBackground.7f54f314.png\";","import { Rewards } from 'nft/types/airdrop'\r\n\r\ninterface CollectionrRewardsResponse {\r\n  data: Array<Rewards>\r\n}\r\n\r\nexport const CollectionRewardsFetcher = async (address: string): Promise<CollectionrRewardsResponse> => {\r\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/rewards/${address}?category=GENIE_UNISWAP_USDC_AIRDROP`\r\n\r\n  const controller = new AbortController()\r\n\r\n  const timeoutId = setTimeout(() => controller.abort(), 3000)\r\n\r\n  const r = await fetch(url, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  })\r\n  clearInterval(timeoutId)\r\n  const data = await r.json()\r\n\r\n  return data\r\n}\r\n","//@ts-nocheck\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport type { TransactionResponse } from '@ethersproject/providers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport uniswapNftAirdropClaim from 'abis/uniswap-nft-airdrop-claim.json'\r\nimport airdropBackgroundv2 from 'assets/images/airdopBackground.png'\r\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\r\nimport { OpacityHoverState } from 'components/Common'\r\nimport Loader from 'components/Icons/LoadingSpinner'\r\nimport { UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS } from 'constants/addresses'\r\nimport { useContract } from 'hooks/useContract'\r\nimport { ChevronRightIcon } from 'nft/components/icons'\r\nimport { useIsNftClaimAvailable } from 'nft/hooks/useIsNftClaimAvailable'\r\nimport { CollectionRewardsFetcher } from 'nft/queries/genie/GetAirdorpMerkle'\r\nimport { Airdrop, Rewards } from 'nft/types/airdrop'\r\nimport { useEffect, useState } from 'react'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport { useModalIsOpen, useToggleModal } from 'state/application/hooks'\r\nimport { ApplicationModal } from 'state/application/reducer'\r\nimport styled from 'styled-components/macro'\r\nimport { CloseIcon, ThemedText } from 'theme'\r\n\r\nimport Modal from '../Modal'\r\n\r\nconst ModalWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Body = styled.div`\r\n  padding: 28px 20px 20px 20px;\r\n`\r\n\r\nconst ClaimButton = styled(ThemeButton)`\r\n  width: 100%;\r\n  background-color: ${({ theme }) => theme.accentAction};\r\n  border-radius: 12px;\r\n  color: ${({ theme }) => theme.white};\r\n`\r\n\r\nconst Line = styled.div`\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: ${({ theme }) => theme.white};\r\n  opacity: 0.24;\r\n  margin-top: 12px;\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst LinkWrap = styled.a`\r\n  text-decoration: none;\r\n  ${OpacityHoverState}\r\n`\r\n\r\nconst ImageContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  width: 100%;\r\n  height: 170px;\r\n`\r\n\r\nconst USDCLabel = styled.div`\r\n  font-weight: 700;\r\n  font-size: 36px;\r\n  line-height: 44px;\r\n  margin-top: 8px;\r\n  color: white;\r\n`\r\n\r\nconst TextContainer = styled.div`\r\n  position: absolute;\r\n  left: 16px;\r\n  top: 16px;\r\n  right: 16px;\r\n`\r\n\r\nconst RewardsDetailsContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst CurrencyText = styled.span`\r\n  color: white;\r\n  font-weight: 500;\r\n  font-size: 12px;\r\n  line-height: 14.5px;\r\n`\r\n\r\nconst ClaimContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  height: 380px;\r\n  padding: 60px 28px;\r\n  padding-bottom: 20px;\r\n`\r\n\r\nconst SuccessText = styled.div`\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  margin-top: 24px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst EtherscanLink = styled.a`\r\n  text-decoration: none;\r\n\r\n  ${OpacityHoverState}\r\n`\r\n\r\nconst CloseButton = styled(ThemeButton)`\r\n  max-width: 68px;\r\n  margin-top: auto;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst SyledCloseIcon = styled(CloseIcon)`\r\n  float: right;\r\n  height: 24px;\r\n\r\n  ${OpacityHoverState}\r\n`\r\n\r\nconst Error = styled.div`\r\n  display: flex;\r\n  color: ${({ theme }) => theme.accentCritical};\r\n  font-weight: 500;\r\n  line-height: 24px;\r\n  border-radius: 16px;\r\n  padding: 12px 20px;\r\n  font-size: 14px;\r\n  align-items: center;\r\n  gap: 12px;\r\n`\r\n\r\nconst ReactLinkWrap = styled.div`\r\n  margin-bottom: 40px;\r\n`\r\n\r\nconst RewardsText = styled.span`\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  color: ${({ theme }) => theme.white};\r\n\r\n  &:first-child {\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\nconst RewardsInformationText = styled.span`\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst MainHeader = styled.span`\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  color: ${({ theme }) => theme.white};\r\n`\r\n\r\nconst EtherscanLinkWrap = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n`\r\n\r\nenum RewardAmounts {\r\n  tradingRewardAmount = 300,\r\n  holderRewardAmount = 1000,\r\n  combinedAmount = 1300,\r\n}\r\n\r\nconst AirdropModal = () => {\r\n  const { account, provider } = useWeb3React()\r\n  const [claim, setClaim] = useState<Rewards>()\r\n  const [isClaimed, setIsClaimed] = useState(false)\r\n  const [hash, setHash] = useState('')\r\n  const [error, setError] = useState(false)\r\n  const setIsClaimAvailable = useIsNftClaimAvailable((state) => state.setIsClaimAvailable)\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [totalAmount, setTotalAmount] = useState(0)\r\n  const isOpen = useModalIsOpen(ApplicationModal.UNISWAP_NFT_AIRDROP_CLAIM)\r\n  const usdcAirdropToggle = useToggleModal(ApplicationModal.UNISWAP_NFT_AIRDROP_CLAIM)\r\n  const contract = useContract(UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS, uniswapNftAirdropClaim)\r\n\r\n  const displayError = () => {\r\n    setIsSubmitting(false)\r\n    setError(true)\r\n    setTimeout(() => {\r\n      setError(false)\r\n    }, 5000)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (account && provider && contract) {\r\n      ;(async () => {\r\n        try {\r\n          const { data } = await CollectionRewardsFetcher(account)\r\n          const claim = data.find((claim) => claim?.rewardType === Airdrop.GENIE_UNISWAP_USDC_AIRDROP)\r\n\r\n          if (!claim) return\r\n\r\n          const [isClaimed] = await contract.connect(provider).functions.isClaimed(claim?.index)\r\n\r\n          if (claim && isClaimed === false) {\r\n            const usdAmount = BigNumber.from(claim.amount).div(10 ** 6)\r\n            setClaim(claim)\r\n            setTotalAmount(usdAmount.toNumber())\r\n            setIsClaimAvailable(true)\r\n          }\r\n        } catch (err) {\r\n          displayError()\r\n        }\r\n      })()\r\n    }\r\n  }, [account, contract, provider, setIsClaimAvailable])\r\n\r\n  const makeClaim = async () => {\r\n    try {\r\n      if (contract && claim && claim.amount && claim.merkleProof && provider) {\r\n        setIsSubmitting(true)\r\n\r\n        const response: TransactionResponse = await contract\r\n          .connect(provider?.getSigner())\r\n          .functions.claim(claim.index, account, claim?.amount, claim?.merkleProof)\r\n\r\n        await response.wait()\r\n\r\n        setHash(response.hash)\r\n        setIsSubmitting(false)\r\n        setIsClaimed(true)\r\n        setIsClaimAvailable(false)\r\n      }\r\n    } catch (err) {\r\n      setIsSubmitting(false)\r\n      displayError()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal hideBorder isOpen={isOpen} onDismiss={usdcAirdropToggle} maxHeight={90} maxWidth={400}>\r\n        <ModalWrap>\r\n          {isClaimed ? (\r\n            <ClaimContainer>\r\n              <ThemedText.HeadlineSmall>Congratulations!</ThemedText.HeadlineSmall>\r\n              <SuccessText>\r\n                You have successfully claimed {totalAmount} USDC. Thank you for supporting Genie.xyz.\r\n              </SuccessText>\r\n              <EtherscanLink href={`https://etherscan.io/tx/${hash}`} target=\"_blank\">\r\n                <ThemedText.Link>\r\n                  <EtherscanLinkWrap>\r\n                    <span>Etherscan</span>\r\n                    <ChevronRightIcon />\r\n                  </EtherscanLinkWrap>\r\n                </ThemedText.Link>\r\n              </EtherscanLink>\r\n\r\n              <CloseButton size={ButtonSize.medium} emphasis={ButtonEmphasis.medium} onClick={usdcAirdropToggle}>\r\n                Close\r\n              </CloseButton>\r\n            </ClaimContainer>\r\n          ) : (\r\n            <>\r\n              <ImageContainer>\r\n                <TextContainer>\r\n                  <SyledCloseIcon onClick={usdcAirdropToggle} stroke=\"white\" />\r\n                  <MainHeader>Uniswap NFT Airdrop</MainHeader>\r\n                  <USDCLabel>{totalAmount} USDC</USDCLabel>\r\n                  <Line />\r\n                  <RewardsDetailsContainer>\r\n                    <RewardsText>Trading rewards</RewardsText>{' '}\r\n                    <CurrencyText>\r\n                      {totalAmount === RewardAmounts.tradingRewardAmount || totalAmount === RewardAmounts.combinedAmount\r\n                        ? `${RewardAmounts.tradingRewardAmount} USDC`\r\n                        : '0'}\r\n                    </CurrencyText>\r\n                  </RewardsDetailsContainer>\r\n                  <RewardsDetailsContainer>\r\n                    <RewardsText>Genie NFT holder rewards</RewardsText>{' '}\r\n                    <CurrencyText>\r\n                      {totalAmount !== RewardAmounts.tradingRewardAmount\r\n                        ? `${RewardAmounts.holderRewardAmount} USDC`\r\n                        : '0'}\r\n                    </CurrencyText>\r\n                  </RewardsDetailsContainer>\r\n                </TextContainer>\r\n                <StyledImage src={airdropBackgroundv2} />\r\n              </ImageContainer>\r\n              <Body>\r\n                <RewardsInformationText>\r\n                  As a long time supporter of Genie, you’ve been awarded {totalAmount} USDC tokens.\r\n                </RewardsInformationText>\r\n                <ReactLinkWrap>\r\n                  <LinkWrap href=\"https://uniswap.org/blog/uniswap-nft-aggregator-announcement\" target=\"_blank\">\r\n                    <ThemedText.Link>Read more about Uniswap NFT.</ThemedText.Link>\r\n                  </LinkWrap>\r\n                </ReactLinkWrap>\r\n\r\n                {error && (\r\n                  <Error>\r\n                    <AlertTriangle />\r\n                    Claim USDC failed. Please try again later\r\n                  </Error>\r\n                )}\r\n\r\n                <ClaimButton\r\n                  onClick={makeClaim}\r\n                  size={ButtonSize.medium}\r\n                  emphasis={ButtonEmphasis.medium}\r\n                  disabled={isSubmitting}\r\n                >\r\n                  {isSubmitting && <Loader stroke=\"white\" />}\r\n                  <span>Claim{isSubmitting && 'ing'} USDC</span>\r\n                </ClaimButton>\r\n              </Body>\r\n            </>\r\n          )}\r\n        </ModalWrap>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AirdropModal\r\n"],"sourceRoot":""}